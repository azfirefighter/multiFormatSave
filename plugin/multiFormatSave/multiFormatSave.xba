<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="multiFormatSave" script:language="StarBasic">REM  *****  BASIC  *****

'************************************************
'Copyright (C) 2004 - 2012 -- StarXpert, Florent Manens (LGPL v2.1+)
'Copyright (C) 2012 and later -- Rob Snelders (GPL v3+)

'This program is free software: you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation, either version 3 of the License, or
'(at your option) any later version.

'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.

'You should have received a copy of the GNU General Public License
'along with this program.  If not, see http://www.gnu.org/licenses/
'************************************************
' Thanks to DannyB for a lot of good examples on ooomacros

Option Explicit

Public dChooseFormat As Object
Global sCurrentURL As String
Global sSaveURL As String

' Decleration of constants
CONST DIFFERENT_FORMATS = 5
CONST ODF = 0
CONST MSO = 1
CONST PNG = 1
CONST MSX = 2
CONST SVG = 2
CONST PDF = 3
CONST RTF = 4

CONST DOC_WRITER = "com.sun.star.text.TextDocument"
CONST DOC_CALC = "com.sun.star.sheet.SpreadsheetDocument"
CONST DOC_IMPRESS = "com.sun.star.presentation.PresentationDocument"
CONST DOC_DRAW = "com.sun.star.drawing.DrawingDocument"

' Information about a file
Type FileDescriptor
  fileURL As String
  format As Integer
  info              ' description() as "com.sun.star.beans.PropertyValue"
End Type

' Function called when we want to save without dialog
Function multiFormatSave()
  initLibraries()

  If ThisComponent.hasLocation() = false Or ThisComponent.getURL() &lt;&gt; sCurrentURL Then
    startDialog()
  Else
    saveFiles( sSaveURL, getAllFormatSettings() )
  EndIf
End Function ' mutliFormatSave

' Function called when the Dialog is started.
Function multiFormatSaveAs()
  initLibraries()
  startDialog()
End Function 'multiFormatSaveAs

Function initLibraries()
    loadBasicLibrary("Tools")
    loadBasicLibrary("FormWizard")
    dChooseFormat = createDialog()
End Function 'initLibraries

' Starts the dialog when needed
Function startDialog()
  initUI()
  ' fix current file URL
  If ThisComponent.hasLocation() = true And ThisComponent.getURL() = sCurrentURL Then
    setUIProperties(sSaveURL, getAllFormatSettings())
  ElseIf (ThisComponent.hasLocation()) Then
    setUIProperties(removeExtension(thiscomponent.Location), getAllFormatSettings())
  Else
    setUIProperties(GetPathSettings("Work"), getAllFormatSettings())
  EndIf
  enableSaveButton()

  DChooseFormat.execute
End Function ' startDialog

' Function called when the "Save" button is clicked.
Function saveButtonPressed()
  Dim sURL As String
  Dim aFormats( DIFFERENT_FORMATS - 1 ) As Integer

  getUIProperties( sURL, aFormats() )
  saveFiles( sURL, aFormats() )
End Function ' saveButtonPressed

' This saves the files
' @param sURL     The URL to save to
' @param aFormats Which formats to save
Function saveFiles( sURL As String, aFormats() As Integer )
  On Local Error Goto ErrorHandler

  Dim iCounter As Integer
  Dim aFileDescriptorList() 'No type here as that breaks

  ' -- Generate the info for the files to save. ----------------------------
  aFileDescriptorList() = getFileDescriptors( sURL, aFormats() )

  ' -- Write the files to the disk. ----------------------------------------
  for iCounter=0 to UBound( aFileDescriptorList() )

    If (Not ThisComponent.hasLocation() And aFileDescriptorList( iCounter ).format = ODF) Then 'Save as ODF
      ThisComponent.storeAsURL( aFileDescriptorList( iCounter ).fileURL, Array() )
    ElseIf (ThisComponent.hasLocation() And ThisComponent.getURL() = aFileDescriptorList( iCounter ).fileURL) Then 'Save current document
      ThisComponent.storeAsURL( aFileDescriptorList( iCounter ).fileURL, Array() )
    Else 'Save other documents
      ThisComponent.storeToURL( aFileDescriptorList( iCounter ).fileURL, aFileDescriptorList( iCounter ).info() )
    EndIf
  Next

  saveAllFormatSettings( aFormats() )
  sSaveURL = sURL
  sCurrentURL = ThisComponent.location
  dChooseFormat.endExecute
  Exit Function

  ' Something bad happened when saving file
  ErrorHandler:
    dChooseFormat.model.LHelp.Label = "&amp;SaveError"
    MsgBox "Error" &amp; ERR &amp; " on line " &amp; ERL &amp; ". " &amp; chr$(13) &amp; ERROR$
End Function ' saveFiles

' Creates the FileDescriptors to be able to save the files
' @param sURL     URL of where to save the files, without extension.
' @param aFormats List of the format (ODF, MSO, PDF) to save the file to.
' @return	  List with FileDescriptors
Function getFileDescriptors( sURL As String, aFormats() As Integer ) As Array
  Dim iCounter As Integer
  iCounter = 0
  Dim aFileDescriptorList( DIFFERENT_FORMATS - 1 ) As FileDescriptor

  'Create the FileDescriptors Themselves
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( ODF ), iCounter, ODF, sURL + ".odt" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( MSO ), iCounter, MSO, sURL + ".doc", "MS Word 97"  )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( MSX ), iCounter, MSX, sURL + ".docx", "MS Word 2007 XML" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( PDF ), iCounter, PDF, sURL + ".pdf", "writer_pdf_Export" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( RTF ), iCounter, RTF, sURL + ".rtf", "Rich Text Format" )
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( ODF ), iCounter, ODF, sURL + ".ods" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( MSO ), iCounter, MSO, sURL + ".xls", "MS Excel 97"  )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( MSX ), iCounter, MSX, sURL + ".xlsx", "Calc MS Excel 2007 XML" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( PDF ), iCounter, PDF, sURL + ".pdf", "calc_pdf_Export" )
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( ODF ), iCounter, ODF, sURL + ".odp" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( MSO ), iCounter, MSO, sURL + ".ppt", "MS PowerPoint 97"  )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( MSX ), iCounter, MSX, sURL + ".pptx", "Impress MS PowerPoint 2007 XML" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( PDF ), iCounter, PDF, sURL + ".pdf", "impress_pdf_Export" )
  ElseIf ThisComponent.SupportsService( DOC_DRAW ) Then
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( ODF ), iCounter, ODF, sURL + ".odg" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( PNG ), iCounter, PNG, sURL + ".png", "draw_png_Export"  )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( SVG ), iCounter, SVG, sURL + ".svg", "draw_svg_Export" )
    createFileDescriptor( aFileDescriptorList( iCounter ), aFormats( PDF ), iCounter, PDF, sURL + ".pdf", "draw_pdf_Export" )
  EndIf

  ' Resize the table and return
  Redim Preserve aFileDescriptorList( iCounter - 1 ) As FileDescriptor
  getFileDescriptors() = aFileDescriptorList()
End Function ' getFileDescriptors

' Lets the user choose a path where to save the documents and save it in the TFPath
' Function called when the "..." button is clicked.
Function choosePath()
  Dim sPath As String
  Dim sURL As String
  sPath = DChooseFormat.model.TFPath.text
  If sPath &lt;&gt; "" And right( sPath, 1 ) &lt;&gt; "/" Then
      sURL = saveFileDialog(DirectoryNameoutofPath(sPath, "/"), FileNameoutofPath(sPath, "/"))
  ElseIf sPath &lt;&gt; "" Then
      sURL = saveFileDialog(sPath)
  Else
      sURL = saveFileDialog(GetPathSettings("Work"))
  EndIf
  If sURL &lt;&gt; "" Then
    DChooseFormat.model.TFPath.text = ConvertFromURL(sURL)
  EndIf
  enableSaveButton()
End Function ' choosePath

' Let the user select a path where to save the documents
' @param sDirectoryPath The directory to start with
' @param sFilePath      The default file for the dialog
' @return               The fileURL the user selected
Function saveFileDialog(sDirectoryPath As String, Optional sFilePath As String) As String
  Dim oFilePicker as Object

  oFilePicker = CreateUnoService( "com.sun.star.ui.dialogs.FilePicker" )
  'Pass some arguments to it
  With oFilePicker
      .initialize(Array(com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_SIMPLE))
      .SetDisplayDirectory( ConvertToURL(sDirectoryPath) )
      .setTitle( "Save As ..." )
  End With
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    oFilePicker.appendFilter(GetFilterName("writer8"), "*.odt" )
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    oFilePicker.appendFilter(GetFilterName("calc8"), "*.ods" )
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    oFilePicker.appendFilter(GetFilterName("impress8"), "*.odp" )
  ElseIf ThisComponent.SupportsService( DOC_DRAW ) Then
    oFilePicker.appendFilter(GetFilterName("draw8"), "*.odg" )
  EndIf
  If Not IsMissing( sFilePath ) Then
     oFilePicker.setDefaultName( sFilePath )
  EndIf

  If oFilePicker.execute() Then
      saveFileDialog() = removeExtension( oFilePicker.getFiles()(0) )
  EndIf
  oFilePicker.Dispose()
End Function ' saveFileDialog

' Removes the file-extension from a Path
' @param sURL The URL of the file
' @return     The URL without the extension
Function removeExtension( sURL As String ) As String
  Dim vExtentions As Variant
  Dim iPosition As Integer
  Dim iCounter As Integer
  Dim sAnExt As String

  ' list of common extentions
  ' OO.o 1.1.x
  ' Open Document Format
  ' MS Office 97
  ' MS OOXML
  ' Writer Other
  ' Calc Other
  ' Impress Other
  ' General Other

  vExtentions = Array(".sxw", ".sxc", ".sxi", ".stw", ".stc", ".sti", ".sxd", _
    ".odt", ".ods", ".odp", ".ott", ".ots", ".otp", ".odg", "odm", _
    ".doc", ".xls", ".ppt", ".dot", ".xlt", ".pot", _
    ".docx", ".docm", ".dotx", ".dotm", ".xlsx", ".xlsm", ".xltx", ".xltm", ".xlsb", ".pptx", ".pptm", ".ppsx", ".ppsm", ".potx", ".potm", ".sldx", ".sldm", _
    ".sdw", ".rtf", ".xml", ".txt", ".pdb", ".psw", ".html", _
    ".sdc", ".dif", ".dbf", ".slk", ".pxl", ".csv", _
    ".sda", ".sdd", _
    ".pdf", ".vor", _
    ".odg", ".svg", ".png")
  iPosition=0
  For iCounter = 0 To UBound( vExtentions )
    sAnExt = vExtentions( iCounter )
    If ( right( sURL, len( sAnExt ) ) = sAnExt ) Then
      iPosition=InStr( sURL, sAnExt )
      Exit For
    EndIf
  Next
  If iPosition &lt;&gt; 0 Then
      removeExtension() = left( sURL, ( iPosition - 1 ) )
  Else
      removeExtension() = sURL
  EndIf
End Function ' removeExtension



' UI FUNCTIONS ---------------------------------------------------

' Sets initialization of the UI
Function initUI()
  Dim oCB4 As Object
  oCB4 = dChooseFormat.getControl("CB4")
  oCB4.Visible = False
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    dChooseFormat.model.CB0.Label = GetFilterName("writer8") + " (odt)"
    dChooseFormat.model.CB1.Label = GetFilterName("MS Word 97") + " (doc)"
    dChooseFormat.model.CB2.Label = GetFilterName("MS Word 2007 XML") + " (docx)"
    dChooseFormat.model.CB3.Label = GetFilterName("writer_pdf_Export") + " (pdf)"
    oCB4.Visible = True
    dChooseFormat.model.CB4.Label = GetFilterName("Rich Text Format") + " (rtf)"
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    dChooseFormat.model.CB0.Label = GetFilterName("calc8") + " (ods)"
    dChooseFormat.model.CB1.Label = GetFilterName("MS Excel 97") + " (xls)"
    dChooseFormat.model.CB2.Label = GetFilterName("Calc MS Excel 2007 XML") + " (xlsx)"
    dChooseFormat.model.CB3.Label = GetFilterName("calc_pdf_Export") + " (pdf)"
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    dChooseFormat.model.CB0.Label = GetFilterName("impress8") + " (odp)"
    dChooseFormat.model.CB1.Label = GetFilterName("MS PowerPoint 97") + " (ppt)"
    dChooseFormat.model.CB2.Label = GetFilterName("Impress MS PowerPoint 2007 XML") + " (pptx)"
    dChooseFormat.model.CB3.Label = GetFilterName("impress_pdf_Export") + " (pdf)"
  ElseIf ThisComponent.SupportsService( DOC_DRAW ) Then
    dChooseFormat.model.CB0.Label = GetFilterName("draw8") + " (odg)"
    dChooseFormat.model.CB1.Label = GetFilterName("draw_png_Export") + " (png)"
    dChooseFormat.model.CB2.Label = GetFilterName("draw_svg_Export") + " (svg)"
    dChooseFormat.model.CB3.Label = GetFilterName("draw_pdf_Export") + " (pdf)"
  EndIf
End Function ' initUI

' Get the values from the interface's widgets.
' @param sURL     The URL were to save the file
' @param aFormats The selected formats
Function getUIProperties( sURL As String, aFormats() as Integer )
  sURL = ConvertToURL( dChooseFormat.model.TFPath.text )
  aFormats( 0 ) = dChooseFormat.model.CB0.state
  aFormats( 1 ) = dChooseFormat.model.CB1.state
  aFormats( 2 ) = dChooseFormat.model.CB2.state
  aFormats( 3 ) = dChooseFormat.model.CB3.state
  aFormats( 4 ) = dChooseFormat.model.CB4.state
End Function ' getUIProperties

' Get the values from the interface's widgets.
' @param sURL The URL were to save the file
Function setUIProperties( sURL As String, aFormats() as Integer )
  dChooseFormat.model.TFPath.text = ConvertFromURL( sURL )
  dChooseFormat.model.CB0.state = aFormats( 0 )
  dChooseFormat.model.CB1.state = aFormats( 1 )
  dChooseFormat.model.CB2.state = aFormats( 2 )
  dChooseFormat.model.CB3.state = aFormats( 3 )
  dChooseFormat.model.CB4.state = aFormats( 4 )
End Function ' setUIProperties

' Check if the save-button needs to be enabled
' Function called when one of the textFields or checkBoxes are changed.
Function enableSaveButton()
If ( DChooseFormat.model.CB0.state = 0 And DChooseFormat.model.CB1.state = 0 And DChooseFormat.model.CB2.state = 0 And DChooseFormat.model.CB3.state = 0 And DChooseFormat.model.CB4.state = 0 ) Then
    DChooseFormat.model.BSave.enabled = FALSE
    DChooseFormat.model.LHelp.Label = "&amp;InputFormatError"
  ElseIf ( DChooseFormat.model.TFPath.text = "" Or right( DChooseFormat.model.TFPath.text, 1) = "/") Then
    DChooseFormat.model.BSave.enabled = FALSE
    DChooseFormat.model.LHelp.Label = "&amp;InputTextError"
  Else
    DChooseFormat.model.BSave.enabled = TRUE
    DChooseFormat.model.LHelp.Label = ""
  EndIf
End Function ' enableSaveButton

' BASIC FUNCTIONS ------------------------------------------------

' Create and return a filedescriptor
' @param uFileDesc The var to save the fileDescriptor in
' @param bCreate   Do we need to create the fileDescriptor
' @param iCounter  De counter van de FileDescriptorList
' @param iFormat   The format to save the file in
' @param sURL      The URL to save the file to
' @param sFilter   The name of the Filter to use (optional)
Function createFileDescriptor( oFileDescriptor As FileDescriptor, iCreate As Integer, iCounter As Integer, iFormat As Integer, sURL As String, Optional sFilter As String )
  If ( iCreate = 0 ) Then
    Exit Function
  EndIf
  Dim aArgs(2) As New com.sun.star.beans.PropertyValue
  If Not IsMissing( sFilter ) Then
    aArgs( 0 ) = makePropertyValue( "FilterName", sFilter )
  EndIf
  ' This 2nd property is only needed for pdf. But doesn't hard the others as it is ignored there
  aArgs( 1 ) = makePropertyValue( "CompressMode", 0 )
  oFileDescriptor.fileURL = sURL
  oFileDescriptor.format = iFormat
  oFileDescriptor.info = aArgs()
  iCounter = iCounter + 1
End Function ' createFileDescriptor

Function getAllFormatSettings() As Array
  Dim aFormats( DIFFERENT_FORMATS - 1 ) As Integer
  Dim settings as Object
  settings = getSettings()

  aFormats( ODF ) = settings.ODF
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    aFormats( RTF ) = settings.RTF
  EndIf
  If ThisComponent.SupportsService( DOC_DRAW ) Then
    aFormats( PNG ) = settings.PNG
    aFormats( SVG ) = settings.SVG
  Else
    aFormats( MSO ) = settings.MSO
    aFormats( MSX ) = settings.MSX
  EndIf
  aFormats( PDF ) = settings.PDF
  getAllFormatSettings() = aFormats()
End Function

Function saveAllFormatSettings( aFormats() As Integer ) As Array
  Dim aFormats( DIFFERENT_FORMATS - 1 ) As Integer
  Dim settings as Object
  settings = getSettings()

  settings.ODF = aFormats( ODF )
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    settings.RTF = aFormats( RTF )
  EndIf
  If ThisComponent.SupportsService( DOC_DRAW ) Then
    settings.PNG = aFormats( PNG )
    settings.SVG = aFormats( SVG )
  Else
    settings.MSO = aFormats( MSO )
    settings.MSX = aFormats( MSX )
  EndIf
  settings.PDF = aFormats( PDF )
  saveSettings( settings )
End Function

Function loadBasicLibrary(name As String)
  If (Not GlobalScope.BasicLibraries.isLibraryLoaded(name)) Then
    GlobalScope.BasicLibraries.Loadlibrary(name)
  EndIf
End Function

Function createDialog()
  If (Not GlobalScope.DialogLibraries.isLibraryLoaded("multiFormatSave")) Then
    GlobalScope.DialogLibraries.Loadlibrary("multiFormatSave")
  EndIf

  createDialog() = CreateUnoDialog(globalscope.DialogLibraries.multiFormatSave.chooseFormat)
End Function

' Create and return a new com.sun.star.beans.PropertyValue.
' @param cName  The name of the property
' @param uValue The value to give the property (optional)
' @return       The created property
Function makePropertyValue( cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
  Dim oPropertyValue As New com.sun.star.beans.PropertyValue
  oPropertyValue.Name = cName
  If Not IsMissing( uValue ) Then
    oPropertyValue.Value = uValue
  EndIf
  makePropertyValue() = oPropertyValue
End Function ' makePropertyValue

</script:module>
