<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="multiFormatSave" script:language="StarBasic">REM  *****  BASIC  *****

'************************************************
'Copyright (C) 2004 - 2012 StarXpert -- Florent Manens (LGPL)
'Copyright (C) 2012 - 2014 Rob Snelders (GPL)

'This program is free software: you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation, either version 3 of the License, or
'(at your option) any later version.

'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.

'You should have received a copy of the GNU General Public License
'along with this program.  If not, see http://www.gnu.org/licenses/
'************************************************
' Thanks to DannyB for a lot of good examples on ooomacros

Option Explicit

Public dChooseFormat As Object
Global currentFileURL As String
Global saveFileURL As String

' Decleration of constants
CONST DIFFERENT_FORMATS = 4
CONST ODF = 0
CONST MSO = 1
CONST MSX = 2
CONST PDF = 3
CONST EXTENSION_NAME = "multiFormatSave"

CONST DOC_WRITER = "com.sun.star.text.TextDocument"
CONST DOC_CALC = "com.sun.star.sheet.SpreadsheetDocument"
CONST DOC_IMPRESS = "com.sun.star.presentation.PresentationDocument"

' Information about a file
Type FileDescriptor
  URL As String
  format As Integer
  info              ' description() as "com.sun.star.beans.PropertyValue"
End Type

' Function called when we want to save without dialog
Function multiFormatSave()
  initLibraries()
  If ThisComponent.hasLocation() = false Or ThisComponent.getURL() &lt;&gt; currentFileURL Then
    startDialog()
  Else
    saveFiles( saveFileURL, getFormatSettings() )
  EndIf
End Function ' mutliFormatSave

' Function called when the Dialog is started.
Function multiFormatSaveAs()
  initLibraries()
  startDialog()
End Function ' multiFormatSaveAs

' Initializes the libraries we use in this plugin
Function initLibraries()
  If (Not GlobalScope.BasicLibraries.isLibraryLoaded("Tools")) Then
    GlobalScope.BasicLibraries.Loadlibrary("Tools")
  EndIf
  If (Not GlobalScope.BasicLibraries.isLibraryLoaded("FormWizard")) Then
    GlobalScope.BasicLibraries.Loadlibrary("FormWizard")
  EndIf
  If (Not GlobalScope.DialogLibraries.isLibraryLoaded(EXTENSION_NAME)) Then
    GlobalScope.DialogLibraries.Loadlibrary(EXTENSION_NAME)
  EndIf
  If InStr(GetProductname(),"LibreOffice") Then
    dChooseFormat = CreateUnoDialog(globalscope.DialogLibraries.multiFormatSave.chooseFormat)
  Else
    dChooseFormat = CreateUnoDialog(globalscope.DialogLibraries.multiFormatSave.chooseFormatOpenOffice)
  EndIf
End Function ' initLibraries

' Starts the dialog when needed
Function startDialog()
  initUI()
  ' fix current file path
  If ThisComponent.hasLocation() = true And ThisComponent.getURL() = currentFileURL Then
    setUIProperties(saveFileURL, getFormatSettings())
  ElseIf (ThisComponent.hasLocation()) Then
    setUIProperties(removeExtension(thiscomponent.Location), getFormatSettings())
  Else
    setUIProperties(GetPathSettings("Work"), getFormatSettings())
  EndIf
  enableSaveButton()

  DChooseFormat.execute
End Function ' startDialog

' Function called when the "Save" button is clicked.
Function saveButtonPressed()
  Dim path As String
  Dim formats( DIFFERENT_FORMATS - 1 ) As Integer
  
  getUIProperties( path, formats() )
  saveFiles( path, formats() )
End Function ' saveButtonPressed

' This saves the files
' @param sPath    The path to save to
' @param iFormats Which formats to save
Function saveFiles( sPath As String, iFormats() As Integer )
  On Local Error Goto ErrorHandler

  Dim counter As Integer
  Dim fileDescriptorList() 'No type here as that breaks

  ' -- Generate the info for the files to save. ----------------------------
  fileDescriptorList() = getFileDescriptors( sPath, iFormats() )

  ' -- Write the files to the disk. ----------------------------------------
  for counter=0 to UBound( fileDescriptorList() )

    If (Not ThisComponent.hasLocation() And fileDescriptorList( counter ).format = ODF) Then 'Save as ODF
      ThisComponent.storeAsURL( fileDescriptorList( counter ).URL, Array() )
    ElseIf (ThisComponent.hasLocation() And ThisComponent.getURL() = fileDescriptorList( counter ).URL) Then 'Save current document
      ThisComponent.storeAsURL( fileDescriptorList( counter ).URL, Array() )
    Else 'Save other documents
      ThisComponent.storeToURL( fileDescriptorList( counter ).URL, fileDescriptorList( counter ).info() )
    EndIf
  Next

  setFormatSettings( iFormats() )
  saveFileURL = sPath
  currentFileURL = thiscomponent.location
  dChooseFormat.endExecute
  Exit Function

  ' Something bad happened when saving file
  ErrorHandler:
    dChooseFormat.model.LHelp.Label = "&amp;SaveError"
    MsgBox "Error" &amp; ERR &amp; " on line " &amp; Erl &amp; ". " &amp; chr$(13) &amp; ERROR$
End Function ' saveFiles

' Creates the FileDescriptors to be able to save the files
' @param sPath    URL of where to save the files, without extension.
' @param aFormats List of the format (ODF, MSO, PDF) to save the file to.
' @return	  List with FileDescriptors
Function getFileDescriptors( sPath As String, aFormats() As Integer ) As Array

  Dim listIterator As Integer
  listIterator = 0
  Dim FileDescriptorList( DIFFERENT_FORMATS - 1 ) As FileDescriptor

  '*********************************************
  'Create the FileDescriptors Themselves
  '*********************************************
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, ODF, sPath + ".odt" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSO ), listIterator, MSO, sPath + ".doc", "MS Word 97"  )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSX ), listIterator, MSX, sPath + ".docx", "MS Word 2007 XML" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( PDF ), listIterator, PDF, sPath + ".pdf", "writer_pdf_Export" )
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, ODF, sPath + ".ods" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSO ), listIterator, MSO, sPath + ".xls", "MS Excel 97"  )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSX ), listIterator, MSX, sPath + ".xlsx", "Calc MS Excel 2007 XML" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( PDF ), listIterator, PDF, sPath + ".pdf", "calc_pdf_Export" )
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, ODF, sPath + ".odp" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSO ), listIterator, MSO, sPath + ".ppt", "MS PowerPoint 97"  )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSX ), listIterator, MSX, sPath + ".pptx", "Impress MS PowerPoint 2007 XML" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( PDF ), listIterator, PDF, sPath + ".pdf", "impress_pdf_Export" )
  EndIf

  ' Resize the table and return
  Redim Preserve FileDescriptorList( listIterator - 1 ) As FileDescriptor
  getFileDescriptors() = FileDescriptorList()
End Function ' getFileDescriptors

' let the user choose a path where to save the documents
' and save it in the TFPath
' Function called when the "..." button is clicked.
Function choosePath()
  Dim path As String
  path = DChooseFormat.model.TFPath.text
  If path &lt;&gt; "" And right( path, 1 ) &lt;&gt; "/" Then
	  path = saveFileDialog(DirectoryNameoutofPath(path, "/"), FileNameoutofPath(path, "/"))
  ElseIf path &lt;&gt; "" Then
	  path = saveFileDialog(path)
  Else
      path = saveFileDialog(GetPathSettings("Work"))
  EndIf
  If path &lt;&gt; "" Then
    DChooseFormat.model.TFPath.text = ConvertFromURL(path)
  EndIf
  enableSaveButton()
End Function ' choosePath

' Let the user select a path where to save the documents
' @param sDirectory The directory to start with
' @param sFileURL   The default file for the dialog
' @return	        The fileURL the user selected
Function saveFileDialog(sDirectory As String, Optional sFileURL As String) As String
  Dim oFilePicker as Object

  oFilePicker = CreateUnoService( "com.sun.star.ui.dialogs.FilePicker" )
  'Pass some arguments to it
  With oFilePicker
      .initialize(Array(com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_SIMPLE))
      .SetDisplayDirectory( ConvertToURL(sDirectory) )
      .setTitle( "Save As ..." )
  End With
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    oFilePicker.appendFilter(GetFilterName("writer8"), "*.odt" )
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    oFilePicker.appendFilter(GetFilterName("calc8"), "*.ods" )
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    oFilePicker.appendFilter(GetFilterName("impress8"), "*.odp" )
  EndIf
  If Not IsMissing( sFileURL ) Then
     oFilePicker.setDefaultName( sFileURL )
  EndIf

  If oFilePicker.execute() Then
      saveFileDialog() = removeExtension( oFilePicker.getFiles()(0) )
  EndIf
  oFilePicker.Dispose()
End Function ' saveFileDialog

' Removes the file-extension from a Path
' @param sPath The path of the file
' @return      The path without the extension
Function removeExtension( sPath As String ) As String

  Dim extentions As Variant
  Dim position As Integer
  Dim ext As Integer
  Dim anExt as string

  ' list of common extentions
  ' Following extensions are recognized:
  ' OO.o 1.1.x    - sxw,sxc,sxi,stw,stc,sti,sxd
  ' OO.o 2.x      - odt,ods,odp,ott,ots,otp,odg,odm
  ' MS Office     - doc,xls,ppt,dot,xlt,pot
  ' MS OOXML      - docx,docm,dotx,dotm,xlsx,xlsm,xltx,xltm,xlsb,pptx,pptm,ppsx,ppsm,potx,potm,sldx,sldm
  ' MS Pocketpc   - psw,pxl
  ' StarX         - sdw,sdc,sdd,vor
  ' Writer Other  - rtf,xml,txt,pdb,html
  ' Calc Other    - dif,dbf,slk,csv
  ' Impress Other - sda
  ' PDF           - pdf

  extentions = Array(".sxw", ".sxc", ".sxi", ".stw", ".stc", ".sti", ".sxd", _
    ".odt", ".ods", ".odp", ".ott", ".ots", ".otp", ".odg", "odm", _
    ".doc", ".xls", ".ppt", ".dot", ".xlt", ".pot", _
    ".docx", ".docm", ".dotx", ".dotm", ".xlsx", ".xlsm", ".xltx", ".xltm", ".xlsb", ".pptx", ".pptm", ".ppsx", ".ppsm", ".potx", ".potm", ".sldx", ".sldm", _
    ".psw", ".pxl", _
    ".sdw", ".sdc", ".sdd", ".vor", _
    ".rtf", ".xml", ".txt", ".pdb", ".html", _
    ".dif", ".dbf", ".slk", ".csv", _
    ".sda", _
    ".pdf")
  position=0
  For ext = 0 To UBound( extentions )
    anExt = extentions( ext )
    If ( right( sPath, len( anExt ) ) = anExt ) Then
      position=InStr( sPath, anExt )
      Exit For
    EndIf
  Next
  If position &lt;&gt; 0 Then
      removeExtension() = left( sPath, ( position - 1 ) )
  Else
      removeExtension() = sPath
  EndIf
End Function ' removeExtension

' Get the value of the formats in the settings-file
' @return The array with the settings for the formats
Function getFormatSettings() As Array
  On Local Error Goto ErrorHandler
  Dim oConfigAccess As Object
  Dim formats( DIFFERENT_FORMATS - 1 ) As Integer

  oConfigAccess = getConfigAccess( "/multiFormatSave.multiFormatSave/multiFormatSaveConfig/settings/formats" )
  formats( ODF ) = oConfigAccess.ODF
  formats( MSO ) = oConfigAccess.MSO
  formats( MSX ) = oConfigAccess.MSX
  formats( PDF ) = oConfigAccess.PDF

  If Not InStr(GetProductname(),"LibreOffice") Then
    formats( MSX ) = 0
  EndIf
  getFormatSettings() = formats()
  Exit Function

  ErrorHandler:
  formats( ODF ) = 1
  formats( MSO ) = 1
  formats( MSX ) = 1
  formats( PDF ) = 1
  If Not InStr(GetProductname(),"LibreOffice") Then
    formats( MSX ) = 0
  EndIf
  getFormatSettings() = formats()
End Function ' getFormatSettings

' Get the value of the formats in the settings-file
' @param formats The array with the settings for the formats
Function setFormatSettings( formats() As Integer )
  Dim oConfigAccess As Object

  oConfigAccess = getConfigAccess( "/multiFormatSave.multiFormatSave/multiFormatSaveConfig/settings/formats" )
  oConfigAccess.ODF = formats( ODF )
  oConfigAccess.MSO = formats( MSO )
  oConfigAccess.MSX = formats( MSX )
  oConfigAccess.PDF = formats( PDF )
  oConfigAccess.commitChanges()
End Function ' setFormatSettings

' UI FUNCTIONS ---------------------------------------------------

' Sets initialization of the UI
Function initUI()
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    dChooseFormat.model.CBODF.Label = GetFilterName("writer8") + " (odt)"
    dChooseFormat.model.CBMSO.Label = GetFilterName("MS Word 97") + " (doc)"
    dChooseFormat.model.CBMSX.Label = GetFilterName("MS Word 2007 XML") + " (docx)"
    dChooseFormat.model.CBPDF.Label = GetFilterName("writer_pdf_Export") + " (pdf)"
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    dChooseFormat.model.CBODF.Label = GetFilterName("calc8") + " (ods)"
    dChooseFormat.model.CBMSO.Label = GetFilterName("MS Excel 97") + " (xls)"
    dChooseFormat.model.CBMSX.Label = GetFilterName("Calc MS Excel 2007 XML") + " (xlsx)"
    dChooseFormat.model.CBPDF.Label = GetFilterName("calc_pdf_Export") + " (pdf)"
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    dChooseFormat.model.CBODF.Label = GetFilterName("impress8") + " (odp)"
    dChooseFormat.model.CBMSO.Label = GetFilterName("MS PowerPoint 97") + " (ppt)"
    dChooseFormat.model.CBMSX.Label = GetFilterName("Impress MS PowerPoint 2007 XML") + " (pptx)"
    dChooseFormat.model.CBPDF.Label = GetFilterName("impress_pdf_Export") + " (pdf)"
  EndIf
End Function ' initUI

' Get the values from the interface's widgets.
' @param sPath    The URL were to save the file
' @param aFormats  The selected formats
Function getUIProperties( sPath As String, aFormats() as Integer )
  Dim fileName As String
  sPath = ConvertToURL( dChooseFormat.model.TFPath.text )
  aFormats( ODF ) = dChooseFormat.model.CBODF.state
  aFormats( MSO ) = dChooseFormat.model.CBMSO.state
  aFormats( MSX ) = dChooseFormat.model.CBMSX.state
  aFormats( PDF ) = dChooseFormat.model.CBPDF.state
End Function ' getUIProperties

' Get the values from the interface's widgets.
' @param sPath     The URL were to save the file
Function setUIProperties( sPath As String, aFormats() as Integer )
  dChooseFormat.model.TFPath.text = ConvertFromURL( sPath )
  dChooseFormat.model.CBODF.state = aFormats( ODF )
  dChooseFormat.model.CBMSO.state = aFormats( MSO )
  dChooseFormat.model.CBMSX.state = aFormats( MSX )
  dChooseFormat.model.CBPDF.state = aFormats( PDF )
End Function ' setUIProperties

' Check if the save-button needs to be enabled
' Function called when one of the textFields or checkBoxes are changed.
Function enableSaveButton()
If ( DChooseFormat.model.CBODF.state = 0 And DChooseFormat.model.CBMSO.state = 0 And DChooseFormat.model.CBMSX.state = 0 And DChooseFormat.model.CBPDF.state = 0 ) Then
    DChooseFormat.model.BSave.enabled = FALSE
    DChooseFormat.model.LHelp.Label = "&amp;InputFormatError"
  ElseIf ( DChooseFormat.model.TFPath.text = "" Or right( DChooseFormat.model.TFPath.text, 1) = "/") Then
    DChooseFormat.model.BSave.enabled = FALSE
    DChooseFormat.model.LHelp.Label = "&amp;InputTextError"
  Else
    DChooseFormat.model.BSave.enabled = TRUE
    DChooseFormat.model.LHelp.Label = ""
  EndIf
End Function ' enableSaveButton

' BASIC FUNCTIONS ------------------------------------------------

' Create and return a filedescriptor
' @param uFileDesc The var to save the fileDescriptor in
' @param bCreate   Do we need to create the fileDescriptor
' @param iCounter  De counter van de FileDescriptorList
' @param iFormat   The format to save the file in
' @param sPath     The path to save the file to
' @param sFilter   The name of the Filter to use (optional)
Function createFileDescriptor( uFileDescriptor As FileDescriptor, bCreate As Integer, iCounter As Integer, iFormat As Integer, sPath As String, Optional sFilter As String )
  If ( bCreate = 0 ) Then
    Exit Function
  EndIf
  Dim uArgs(2) As New com.sun.star.beans.PropertyValue
  If Not IsMissing( sFilter ) Then
    uArgs( 0 ) = MakePropertyValue( "FilterName", sFilter )
  EndIf
  ' This 2nd property is only needed for pdf. But doesn't hard the others as it is ignored there
  uArgs( 1 ) = MakePropertyValue( "CompressMode", 0 )
  uFileDescriptor.URL = ConvertToURL( sPath )
  uFileDescriptor.format = iFormat
  uFileDescriptor.info = uArgs()
  iCounter = iCounter + 1
End Function ' createFileDescriptor

' Connect to the config-values
' @param sNodePath The path to the properties
' @return          The properties
Function getConfigAccess( sNodePath As String ) As Object
  Dim oConfigProvider As Object
  oConfigProvider = createUnoService( "com.sun.star.configuration.ConfigurationProvider" )
  getConfigAccess() = oConfigProvider.createInstanceWithArguments( "com.sun.star.configuration.ConfigurationUpdateAccess", _
	Array( MakePropertyValue( "nodepath", sNodePath ) ) )
End Function ' GetConfigAccess

' Create and return a new com.sun.star.beans.PropertyValue.
' @param cName  The name of the property
' @param uValue The value to give the property (optional)
' @return       The created property
Function makePropertyValue( cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
  Dim oPropertyValue As New com.sun.star.beans.PropertyValue
  oPropertyValue.Name = cName
  If Not IsMissing( uValue ) Then
    oPropertyValue.Value = uValue
  EndIf
  makePropertyValue() = oPropertyValue
End Function ' makePropertyValue

</script:module>
