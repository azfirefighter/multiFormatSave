<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="multiFormatSave" script:language="StarBasic">REM  *****  BASIC  *****

&apos;************************************************
&apos;Copyright (C) 2004 - 2012 StarXpert -- Florent Manens (LGPL)
&apos;Copyright (C) 2012 - 2013 Rob Snelders (GPL)

&apos;This program is free software: you can redistribute it and/or modify
&apos;it under the terms of the GNU General Public License as published by
&apos;the Free Software Foundation, either version 3 of the License, or
&apos;(at your option) any later version.

&apos;This program is distributed in the hope that it will be useful,
&apos;but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&apos;GNU General Public License for more details.

&apos;You should have received a copy of the GNU General Public License
&apos;along with this program.  If not, see http://www.gnu.org/licenses/
&apos;************************************************
&apos; Thanks to DannyB for a lot of good examples on ooomacros

&apos; Improvements possible :
&apos;- check if the file has been modified
&apos;- move the localization stuff to another file

Option Explicit

Public DChooseFormat As Object

&apos; Decleration of constants
CONST DIFFERENT_FORMATS = 3
CONST ODF = 0
CONST MSO = 1
CONST PDF = 2
CONST EXTENSION_ID = "extensions.multiFormatSave"

&apos; Informations about a file.
Type FileDescriptor
  URL As String
  format As Integer &apos; ODF, MSO, PDF
  info              &apos; description() as &quot;com.sun.star.beans.PropertyValue&quot;
End Type

&apos; goal : record a file under different filter (word, pdf, OOo)
Sub multiFormatSaveAs

  globalscope.Basiclibraries.Loadlibrary(&quot;multiFormatSave&quot;)
  globalscope.DialogLibraries.LoadLibrary(&quot;multiFormatSave&quot;)
  DChooseFormat = CreateUnoDialog(globalscope.DialogLibraries.multiFormatSave.chooseFormat)

  &apos; fix current file path
  DChooseFormat.model.TFPath.text = ConvertFromURL(getFile(thisComponent.Location, true))
  DChooseFormat.model.TFFilename.text = ConvertFromURL(getFile(thisComponent.Location, false))

  &apos; fix icon path
  Dim Location As String
  Location = GetMyLocation()
  DChooseFormat.model.IODF.ImageURL = Location + "/icons/ODF.png"
  DChooseFormat.model.IMSO.ImageURL = Location + "/icons/MSO.png"
  DChooseFormat.model.IPDF.ImageURL = Location + "/icons/PDF.png"

  DChooseFormat.model.LHelp.Label = ""

  DChooseFormat.execute
End Sub

&apos; goal: Function called when the &quot;Save&quot; button is clicked.
Sub OK

  &apos; verify parameters
  if DChooseFormat.model.TFPath.text  = &quot;&quot; or DChooseFormat.model.TFFilename.text = &quot;&quot; then
    DChooseFormat.model.LHelp.Label = "&amp;InputError"
    exit sub
  end if

  &apos; Error managment.
  On Local Error Goto ErrorHandler

  &apos; -- Getting info from the UI. -------------------------------------------
  &apos; Note : sPath is useless for Sending Mail
  Dim sPath As String
  Dim sPathURL As String
  Dim fileName As String
  Dim formats( DIFFERENT_FORMATS - 1 ) as Boolean

  GetUIProperties( sPath, fileName, formats() )

  &apos; Convert the path to a URL
  sPathURL = ConvertToURL( sPath )
  &apos; check the &quot;/&quot; at url end
  if right(sPathURL,1) &lt;&gt; &quot;/&quot; Then
    sPathURL = sPathURL+&quot;/&quot;
  End If

  &apos; -- Generate the info for the files to save. ----------------------------
  Dim FileDescriptorList()
  FileDescriptorList() = generateFileDescriptors( sPathURL, fileName, formats() )

  &apos; -- Write the files to the disk. ----------------------------------------
  Dim counter
  for counter=0 to UBound( FileDescriptorList() )

    &apos; Save As... Behavior : the file displayed is the OOo version just saved.
    if FileDescriptorList( counter ).format = getCurrentFormat(fileName) then &apos;ODF then
      &apos;print &quot;Save AS&quot;
      ThisComponent.storeAsURL( FileDescriptorList( counter ).URL, FileDescriptorList( counter ).info() )
    Else
      &apos;Export behavior
      ThisComponent.storeToURL( FileDescriptorList( counter ).URL, FileDescriptorList( counter ).info() )
    End if
  next

  DChooseFormat.endExecute
  exit sub

  &apos; Something bad happened when saving file
  ErrorHandler:
    DChooseFormat.model.LHelp.Label = "&amp;SaveError"
    MsgBox &quot;Error&quot; &amp; ERR &amp; &quot; on line &quot; &amp; Erl &amp; &quot;. &quot; &amp; chr$(13) &amp; ERROR$
End Sub

&apos;getCurrentFormat()------------------------------------------------------------------
&apos;
&apos;@Task : provide format of the current document (ODF, MS)
&apos;@Parameters : file_name =&gt; current document name with its extension
&apos;@Returns : an integer which represents current format : ODF or MSO
&apos;------------------------------------------------------------------------------------
Function getCurrentFormat(file_name as string) as integer
  &apos;msgbox file_name
  Dim parts()
  Dim ext as string
  Dim tabOOo(), tabMS() as string
  parts = split(file_name,&quot;.&quot;)

  tabOOo = array(&quot;sxw&quot;, &quot;sxc&quot;, &quot;sxi&quot;, &quot;stw&quot;,&quot;stc&quot;, &quot;sti&quot;, &quot;sxd&quot;, &quot;odt&quot;, &quot;ods&quot;, &quot;odp&quot;, &quot;ott&quot;, &quot;ots&quot;, &quot;otp&quot;, &quot;odg&quot;)
  tabMS = array(&quot;doc&quot;, &quot;xls&quot;, &quot;ppt&quot;, &quot;dot&quot;, &quot;xlt&quot;, &quot;pot&quot;, &quot;docx&quot;, &quot;docm&quot;, &quot;dotx&quot;, &quot;dotm&quot;, &quot;xlsx&quot;, &quot;xlsm&quot;, &quot;xltx&quot;, &quot;xltm&quot;, &quot;xlsb&quot;, &quot;pptx&quot;, &quot;pptm&quot;, &quot;ppsx&quot;, &quot;ppsm&quot;, &quot;potx&quot;, &quot;potm&quot;, &quot;sldx&quot;, &quot;sldm&quot;)

  Dim ubParts as long
  ubParts = ubound(parts)

  &apos;default value : if file_name equals &quot;&quot; or if file_name have no extension
  getCurrentFormat = ODF
  if (ubParts &gt; 0) then
    &apos;here file_name is different than &quot;&quot; and it have an extension
    ext = parts(ubParts)
    if isIn(ext, tabOOo) then
      getCurrentFormat = ODF
    elseif isIn(ext, tabMS) then
      getCurrentFormat = MSO
    else
      getCurrentFormat = PDF
    endif
  endif

End function

&apos; Get the values from the interface&apos;s widgets.
&apos; @param sPath    The path were to save the file (output).
&apos; @param fileName The name from the text-box (output)
&apos; @param formats  The selected formats. (output)
&apos;
Sub GetUIProperties( sPath As String, fileName As String, formats() as Boolean )
  sPath = DChooseFormat.model.TFPath.text
  FileName = DChooseFormat.model.TFFilename.text
  formats(MSO) = DChooseFormat.model.CBMSO.state
  formats(ODF) = DChooseFormat.model.CBODF.state
  formats(PDF) = DChooseFormat.model.CBPDF.state
End Sub

&apos; Saves to  function
&apos;
&apos; Parameters :
&apos; - directoryURL [IN] : URL of the directory where to save the files.
&apos; - documentName [IN] : generic name of the file to be save (name with no extension).
&apos; - formats() [IN] : list of the format (ODF, MSO, PDF) to save the file to.
&apos;
&apos; Returns :
&apos; - the list of FileDescriptor structure :
&apos;	Struct FileDescriptor {
&apos;		URL : URL to the file
&apos;		info : list of &quot;com.sun.star.beans.PropertyValue&quot; useful for saving a file.
&apos;	}
&apos;
&apos; TODO : we can avoid the &quot;redim&quot; at the end by defining the value of fileDescriptors
&apos; to be returned based on the &quot;format()&quot; argument.
Function generateFileDescriptors( directoryURL As String, documentName As String, formats() As Boolean )

  Dim cDocumentTitle As String
  Dim position as Integer

  &apos; Get the name of the file to be created.
  Dim listIterator As Integer
  listIterator = 0

  Dim FileDescriptorList( UBOUND( formats() ) ) As FileDescriptor

  &apos; Path to the document (without extension).
  cDocumentTitle = directoryURL + documentName
  position = getCommonExtention(cDocumentTitle)
  if (position &lt;&gt; 0) then
    cdocumenttitle = left(cdocumenttitle,(position - 1))
  end if

  &apos;*********************************************
  &apos;Working in Calc
  &apos;*********************************************
  If ThisComponent.SupportsService(&quot;com.sun.star.sheet.SpreadsheetDocument&quot;) Then

    &apos; Save as MS Office format (XLS).
    if formats(MSO) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), MSO, cDocumentTitle + &quot;.xls&quot;, &quot;MS Excel 97&quot; )
      listIterator = listIterator + 1
    end if

    &apos; Save as OpenOffice format (ODS)
    if formats(ODF) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), ODF, cDocumentTitle + &quot;.ods&quot; )
      listIterator = listIterator + 1
    end if

    &apos; Save as PDF format
    if formats(PDF) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), PDF, cDocumentTitle + &quot;.pdf&quot;, &quot;calc_pdf_Export&quot;, 0 )
      listIterator = listIterator + 1
    End if

  &apos;*********************************************
  &apos;Working in Writer
  &apos;*********************************************
  ElseIf ThisComponent.SupportsService(&quot;com.sun.star.text.TextDocument&quot;) Then

    &apos; Save a backup as DOC
    if formats(MSO) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), MSO, cDocumentTitle + &quot;.doc&quot;, &quot;MS Word 97&quot; )
      listIterator = listIterator + 1
    end if

    &apos; Save the document as ODT
    if formats(ODF) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), ODF, cDocumentTitle + &quot;.odt&quot; )
      listIterator = listIterator + 1
    end if

    &apos; Save a backup as a PDF
    if formats(PDF) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), PDF, cDocumentTitle + &quot;.pdf&quot;, &quot;writer_pdf_Export&quot;, 0 )
      listIterator = listIterator + 1
    End if

  &apos;*********************************************
  &apos;Working in Impress
  &apos;*********************************************
  ElseIf ThisComponent.SupportsService(&quot;com.sun.star.presentation.PresentationDocument&quot;) Then

    &apos; Save a backup as PPT
    if formats(MSO) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), MSO, cDocumentTitle + &quot;.ppt&quot;, &quot;MS PowerPoint 97&quot; )
      listIterator = listIterator + 1
    end if

    &apos; Save the document as SXI or ODP
    if formats(ODF) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), ODF, cDocumentTitle + &quot;.odp&quot; )
      listIterator = listIterator + 1
    end if

    &apos; Save a backup as a PDF
    if formats(PDF) = TRUE then
      createFileDescriptor( FileDescriptorList( listIterator ), PDF, cDocumentTitle + &quot;.pdf&quot;, &quot;impress_pdf_Export&quot;, 0 )
      listIterator = listIterator + 1
    End If
  End If

  &apos; Resize the table so that it fits exactly the numer of files to be created.
  Redim Preserve FileDescriptorList( listIterator - 1 ) As FileDescriptor

  &apos; Returns the list of fileDescriptor.
  generateFileDescriptors = FileDescriptorList()

End Function

&apos; Goal: Set the file-name
Sub ChoosePath
  Dim Folder As String

  If DChooseFormat.model.TFPath.text &lt;&gt; &quot;&quot; Then
    Folder = DChooseFormat.model.TFPath.text
  ElseIf thisComponent.Location &lt;&gt; &quot;&quot; Then
    Folder = getFile(thisComponent.Location, true)
  Else
    Folder = &quot;~/&quot;
  End If
  Folder = OpenFolderDialog(ConvertToURL(Folder))
  if Folder &lt;&gt; &quot;&quot; then
    DChooseFormat.model.TFPath.text = ConvertFromURL(Folder)
  end if
End Sub

&apos; Goal: Open the folder-dialog with the given folder
Sub OpenFolderDialog(Folder As String) As String
  Dim sFolderPickerArgs as Variant
  Dim oFolderPicker as Object

  sFolderPickerArgs = Array(com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_SIMPLE )
  oFolderPicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FolderPicker&quot; )
  oFolderPicker.setDisplayDirectory( Folder )
  If oFolderPicker.execute() Then
    OpenFolderDialog = oFolderPicker.Directory
  End If
End Sub

&apos; Goal: Invert the selection of CBODF
Sub IODF_click
  DChooseFormat.model.CBODF.state = 1 xor DChooseFormat.model.CBODF.state
  BSave_Enable
End sub

&apos; Goal: Invert the selection of CBPDF
Sub IPDF_click
  DChooseFormat.model.CBPDF.state = 1 xor DChooseFormat.model.CBPDF.state
  BSave_Enable
End sub

&apos; Goal: Invert the selection of CBMSO
Sub IMSO_click
  DChooseFormat.model.CBMSO.state = 1 xor DChooseFormat.model.CBMSO.state
  BSave_Enable
End sub

&apos; Goal: Check if the save-button needs to be enabled
Sub BSave_Enable
  If DChooseFormat.model.CBODF.state = 1 or DChooseFormat.model.CBMSO.state = 1 or DChooseFormat.model.CBPDF.state = 1 then
    DChooseFormat.model.BSave.enabled = true
  Else
    DChooseFormat.model.BSave.enabled = false
  EndIf
End sub

&apos; Goal: Get the extension for the documenttitle
Function getCommonExtention(DocumentTitle)

  Dim extentions As Variant
  Dim result As Variant
  Dim ext As Integer
  Dim anExt as string

  &apos; list of common extentions
  &apos; Following extensions are recognized:
  &apos; OO.o 1.1.x    - sxw,sxc,sxi,stw,stc,sti,sxd
  &apos; OO.o 2.x      - odt,ods,odp,ott,ots,otp,odg,odm
  &apos; MS Office     - doc,xls,ppt,dot,xlt,pot
  &apos; MS OOXML      - docx,docm,dotx,dotm,xlsx,xlsm,xltx,xltm,xlsb,pptx,pptm,ppsx,ppsm,potx,potm,sldx,sldm
  &apos; MS Pocketpc   - psw,pxl
  &apos; StarX         - sdw,sdc,sdd,vor
  &apos; Writer Other  - rtf,xml,txt,pdb,html
  &apos; Calc Other    - dif,dbf,slk,csv
  &apos; Impress Other - sda

  extentions = Array(&quot;.sxw&quot;, &quot;.sxc&quot;, &quot;.sxi&quot;, &quot;.stw&quot;, &quot;.stc&quot;, &quot;.sti&quot;, &quot;.sxd&quot;, _
    &quot;.odt&quot;, &quot;.ods&quot;, &quot;.odp&quot;, &quot;.ott&quot;, &quot;.ots&quot;, &quot;.otp&quot;, &quot;.odg&quot;, &quot;odm&quot;, _
    &quot;.doc&quot;, &quot;.xls&quot;, &quot;.ppt&quot;, &quot;.dot&quot;, &quot;.xlt&quot;, &quot;.pot&quot;, _
    &quot;.docx&quot;, &quot;.docm&quot;, &quot;.dotx&quot;, &quot;.dotm&quot;, &quot;.xlsx&quot;, &quot;.xlsm&quot;, &quot;.xltx&quot;, &quot;.xltm&quot;, &quot;.xlsb&quot;, &quot;.pptx&quot;, &quot;.pptm&quot;, &quot;.ppsx&quot;, &quot;.ppsm&quot;, &quot;.potx&quot;, &quot;.potm&quot;, &quot;.sldx&quot;, &quot;.sldm&quot;, _
    &quot;.psw&quot;, &quot;.pxl&quot;, _
    &quot;.sdw&quot;, &quot;.sdc&quot;, &quot;.sdd&quot;, &quot;.vor&quot;, _
    &quot;.rtf&quot;, &quot;.xml&quot;, &quot;.txt&quot;, &quot;.pdb&quot;, &quot;.html&quot;, _
    &quot;.dif&quot;, &quot;.dbf&quot;, &quot;.slk&quot;, &quot;.csv&quot;, _
    &quot;.sda&quot;)
  result=0
  for ext = LBound(extentions) To UBound(extentions)
    anExt = extentions(ext)
    if (right(documentTitle, len(anExt)) = anExt) then
      result=InStr(DocumentTitle,anExt)
      Exit For
    end if
  Next ext
  getCommonExtention=result
End Function

&apos; BASIC FUNCTIONS ------------------------------------------------

&apos; Goal: Get the location to of the Extension
Function GetMyLocation()
  Dim oPIP As Object
  oPIP = GetDefaultContext().getByName( "/singletons/com.sun.star.deployment.PackageInformationProvider")
  GetMyLocation = oPIP.getPackageLocation(EXTENSION_ID)
End Function

&apos; Get the directory where to save to from the filepath
&apos; @param FileLocation The location where the file is
&apos; @param ReturnPath   True then give fileName, False then give filePath
&apos; @return             The filename or filepath depending on ReturnPath
Function getFile(FileLocation As String, ReturnPath As boolean) As String
  &apos; find last  &quot;/&quot;
  &apos; extract first part
  Dim pos as integer
  Dim StringEnd as integer

  pos=1
  While (pos &lt;&gt; 0)
    pos = InStr(pos,FileLocation,&quot;/&quot;) &apos; should i use split ?
    If pos &lt;&gt; 0 Then
      StringEnd=pos
      pos=pos+1
    End If
  Wend
  if ReturnPath then
    getFile=left(FileLocation,StringEnd)
  else
    getFile=right(FileLocation,len(FileLocation) -StringEnd)
  end if
End Function &apos;getFile

&apos; Check if a string is present in the array of strings
&apos; @param str  String to seek in array
&apos; @param list Array to read through
&apos; @return     Is the string in the list?
Function isIn(str as string, list as array) as boolean
  Dim found as boolean &apos;False
  Dim i as integer &apos;0
  Do until found or i &gt; Ubound(list)
    found = (str = list(i))
    i=i+1
  loop
  isIn = found
End function &apos; isIn

&apos; Create and return a filedescriptor
&apos; @param uFileDesc The var to save the fileDescriptor in
&apos; @param cFormat   The format to save the file in
&apos; @param cPath     The path to save the file to
&apos; @param cFilter   The name of the Filter to use (optional)
&apos; @param nCompress The level of compress (optional)
Function createFileDescriptor( uFileDescriptor As FileDescriptor, cFormat As Integer, cPath As String, Optional cFilter As String, Optional nCompress As Integer )
  Dim uArgs(2) As New com.sun.star.beans.PropertyValue
  If Not IsMissing( cFilter ) Then
    uArgs( 0 ) = MakePropertyValue( &quot;FilterName&quot;, cFilter )
  EndIf
  If Not IsMissing( nCompress ) Then
    uArgs( 1 ) = MakePropertyValue( &quot;CompressMode&quot;, nCompress )
  EndIf
  uFileDescriptor.URL = ConvertToURL( cPath )
  uFileDescriptor.format = cFormat
  uFileDescriptor.info = uArgs()
End Function &apos; createFileDescriptor

&apos; Create and return a new com.sun.star.beans.PropertyValue.
&apos; @param cName  The name of the property
&apos; @param uValue The value to give the property
&apos; @return       The created property
Function makePropertyValue( Optional cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
  Dim oPropertyValue As New com.sun.star.beans.PropertyValue
  If Not IsMissing( cName ) Then
    oPropertyValue.Name = cName
  EndIf
  If Not IsMissing( uValue ) Then
    oPropertyValue.Value = uValue
  EndIf
  makePropertyValue() = oPropertyValue
End Function &apos; makePropertyValue

</script:module>
