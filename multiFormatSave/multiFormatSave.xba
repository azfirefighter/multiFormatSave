<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="multiFormatSave" script:language="StarBasic">REM  *****  BASIC  *****

'************************************************
'Copyright (C) 2004 - 2012 StarXpert -- Florent Manens (LGPL)
'Copyright (C) 2012 - 2013 Rob Snelders (GPL)

'This program is free software: you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation, either version 3 of the License, or
'(at your option) any later version.

'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.

'You should have received a copy of the GNU General Public License
'along with this program.  If not, see http://www.gnu.org/licenses/
'************************************************
' Thanks to DannyB for a lot of good examples on ooomacros

Option Explicit

Public dChooseFormat As Object

' Decleration of constants
CONST DIFFERENT_FORMATS = 4
CONST ODF = 0
CONST MSO = 1
CONST MSX = 2
CONST PDF = 3
CONST EXTENSION_NAME = "multiFormatSave"

CONST DOC_WRITER = "com.sun.star.text.TextDocument"
CONST DOC_CALC = "com.sun.star.sheet.SpreadsheetDocument"
CONST DOC_IMPRESS = "com.sun.star.presentation.PresentationDocument"

' Information about a file
Type FileDescriptor
  URL As String
  format As Integer
  info              ' description() as "com.sun.star.beans.PropertyValue"
End Type

' Function called when the Dialog is started.
Function multiFormatSaveAs()

  If (Not GlobalScope.BasicLibraries.isLibraryLoaded("Tools")) Then
    GlobalScope.BasicLibraries.Loadlibrary("Tools")
  EndIf
  If (Not GlobalScope.BasicLibraries.isLibraryLoaded("FormWizard")) Then
    GlobalScope.BasicLibraries.Loadlibrary("FormWizard")
  EndIf
  If (Not GlobalScope.DialogLibraries.isLibraryLoaded(EXTENSION_NAME)) Then
    GlobalScope.DialogLibraries.Loadlibrary(EXTENSION_NAME)
  EndIf
  dChooseFormat = CreateUnoDialog(globalscope.DialogLibraries.multiFormatSave.chooseFormat)

  ' fix current file path
  If (ThisComponent.hasLocation()) Then
    setUIProperties(DirectoryNameoutofPath(thiscomponent.Location, "/"), FileNameoutofPath(thiscomponent.Location, "/"))
  Else
    setUIProperties(GetPathSettings("Work"), "")
  EndIf
  enableSaveButton()

  initUI()

  DChooseFormat.execute
End Function ' multiFormatSaveAs

' This saves the files
' Function called when the "Save" button is clicked.
Function saveFiles()

  ' Error managment.
  On Local Error Goto ErrorHandler

  ' -- Getting info from the UI. -------------------------------------------
  Dim path As String
  Dim fileName As String
  Dim formats( DIFFERENT_FORMATS - 1 ) As Boolean

  getUIProperties( path, fileName, formats() )

  ' -- Generate the info for the files to save. ----------------------------
  Dim fileDescriptorList()
  fileDescriptorList() = getFileDescriptors( path, fileName, formats() )

  ' -- Write the files to the disk. ----------------------------------------
  Dim counter
  for counter=0 to UBound( FileDescriptorList() )

    If (Not ThisComponent.hasLocation() And fileDescriptorList( counter ).format = ODF) Then 'Save as ODF
      ThisComponent.storeAsURL( fileDescriptorList( counter ).URL, Array() )
    ElseIf (ThisComponent.hasLocation() And ThisComponent.getURL() = fileDescriptorList( counter ).URL) Then 'Save current document
      ThisComponent.storeAsURL( fileDescriptorList( counter ).URL, Array() )
    Else 'Save other documents
      ThisComponent.storeToURL( fileDescriptorList( counter ).URL, fileDescriptorList( counter ).info() )
    EndIf
  Next

  dChooseFormat.endExecute
  Exit Function

  ' Something bad happened when saving file
  ErrorHandler:
    dChooseFormat.model.LHelp.Label = "&amp;SaveError"
    MsgBox "Error" &amp; ERR &amp; " on line " &amp; Erl &amp; ". " &amp; chr$(13) &amp; ERROR$
End Function ' saveFiles

' Get the values from the interface's widgets.
' @param sPath    The URL-path were to save the file
' @param sFileName The name from the text-box
' @param aFormats  The selected formats
Function getUIProperties( sPath As String, sFileName As String, aFormats() as Boolean )
  sPath = ConvertToURL( dChooseFormat.model.TFPath.text )
  sFileName = dChooseFormat.model.TFFile.text
  aFormats( ODF ) = dChooseFormat.model.CBODF.state
  aFormats( MSO ) = dChooseFormat.model.CBMSO.state
  aFormats( MSX ) = dChooseFormat.model.CBMSX.state
  aFormats( PDF ) = dChooseFormat.model.CBPDF.state
  ' check the "/" at url end
  If right( sPath, 1 ) &lt;&gt; "/" Then
    sPath = sPath + "/"
  EndIf
End Function ' getUIProperties

' Get the values from the interface's widgets.
' @param sPath     The URL-path were to save the file
' @param sFileName The name from the text-box
Function setUIProperties( sPath As String, sFileName As String )
  dChooseFormat.model.TFPath.text = ConvertFromURL( sPath )
  dChooseFormat.model.TFFile.text = sFileName
End Function ' setUIProperties

' Creates the FileDescriptors to be able to save the files
' @param sDirectory  URL of the directory where to save the files.
' @param sFileName   Generic name of the file to be save.
' @param aFormats	  List of the format (ODF, MSO, PDF) to save the file to.
' @return		  List with FileDescriptors
Function getFileDescriptors( sDirectory As String, sFileName As String, aFormats() As Boolean ) As Array

  Dim documentTitle As String
  Dim position as Integer
  Dim listIterator As Integer
  listIterator = 0

  Dim FileDescriptorList( DIFFERENT_FORMATS ) As FileDescriptor

  ' Path to the document (without extension).
  documentTitle = sDirectory + sFileName
  position = getPositionExtensionInPath( documentTitle )
  if (position &lt;&gt; 0) then
    documentTitle = left( documentTitle, ( position - 1 ) )
  end if

  '*********************************************
  'Create the FileDescriptors Themselves
  '*********************************************
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, ODF, documentTitle + ".odt" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSO ), listIterator, MSO, documentTitle + ".doc", "MS Word 97"  )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSX ), listIterator, MSX, documentTitle + ".docx", "MS Word 2007 XML" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, PDF, documentTitle + ".pdf", "writer_pdf_Export" )
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, ODF, documentTitle + ".ods" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSO ), listIterator, MSO, documentTitle + ".xls", "MS Excel 97"  )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSX ), listIterator, MSX, documentTitle + ".xlsx", "Calc MS Excel 2007 XML" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, PDF, documentTitle + ".pdf", "calc_pdf_Export" )
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, ODF, documentTitle + ".odp" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSO ), listIterator, MSO, documentTitle + ".ppt", "MS PowerPoint 97"  )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( MSX ), listIterator, MSX, documentTitle + ".pptx", "Impress MS PowerPoint 2007 XML" )
    createFileDescriptor( FileDescriptorList( listIterator ), aFormats( ODF ), listIterator, PDF, documentTitle + ".pdf", "impress_pdf_Export" )
  EndIf

  ' Resize the table and return
  Redim Preserve FileDescriptorList( listIterator - 1 ) As FileDescriptor
  getFileDescriptors = FileDescriptorList()
End Function ' getFileDescriptors

' let the user choose a path where to save the documents
' and save it in the TFPath
' Function called when the "..." button is clicked.
Function chooseFolder()
  Dim Folder As String

  Folder = DChooseFormat.model.TFPath.text
  If Folder = "" Then
    Folder = GetPathSettings("Work")
  End If
  Folder = openFolderDialog(ConvertToURL(Folder))
  if Folder &lt;&gt; "" then
    DChooseFormat.model.TFPath.text = ConvertFromURL(Folder)
  end if
End Function ' choosePath

' Let the user select a path where to save the documents
' @param sFolder The folder to start the dialog
' @return	      The folder the user selected
Function openFolderDialog(sFolder As String) As String
  Dim oFolderPicker as Object

  oFolderPicker = CreateUnoService( "com.sun.star.ui.dialogs.FolderPicker" )
  oFolderPicker.setDisplayDirectory( sFolder )
  If ( oFolderPicker.execute() ) Then
    openFolderDialog = oFolderPicker.Directory
  EndIf
End Function ' openFolderDialog

' Check if the save-button needs to be enabled
' Function called when one of the textFields or checkBoxes are changed.
Function enableSaveButton()
  If ( Not DChooseFormat.model.CBODF.state = TRUE And Not DChooseFormat.model.CBMSO.state = TRUE And Not DChooseFormat.model.CBMSX.state = TRUE And Not DChooseFormat.model.CBPDF.state = TRUE ) Then
    DChooseFormat.model.BSave.enabled = FALSE
    DChooseFormat.model.LHelp.Label = "&amp;InputFormatError"
  ElseIf ( DChooseFormat.model.TFFile.text = "" Or DChooseFormat.model.TFPath.text = "" ) Then
    DChooseFormat.model.BSave.enabled = FALSE
    DChooseFormat.model.LHelp.Label = "&amp;InputTextError"
  Else
    DChooseFormat.model.BSave.enabled = TRUE
    DChooseFormat.model.LHelp.Label = ""
  EndIf
End Function ' enableSaveButton

' Get the extension of the file
' @param sPath The path of the file
' @return      The position where the extension starts
Function getPositionExtensionInPath( sPath As String ) As Integer

  Dim extentions As Variant
  Dim result As Variant
  Dim ext As Integer
  Dim anExt as string

  ' list of common extentions
  ' Following extensions are recognized:
  ' OO.o 1.1.x    - sxw,sxc,sxi,stw,stc,sti,sxd
  ' OO.o 2.x      - odt,ods,odp,ott,ots,otp,odg,odm
  ' MS Office     - doc,xls,ppt,dot,xlt,pot
  ' MS OOXML      - docx,docm,dotx,dotm,xlsx,xlsm,xltx,xltm,xlsb,pptx,pptm,ppsx,ppsm,potx,potm,sldx,sldm
  ' MS Pocketpc   - psw,pxl
  ' StarX         - sdw,sdc,sdd,vor
  ' Writer Other  - rtf,xml,txt,pdb,html
  ' Calc Other    - dif,dbf,slk,csv
  ' Impress Other - sda

  extentions = Array(".sxw", ".sxc", ".sxi", ".stw", ".stc", ".sti", ".sxd", _
    ".odt", ".ods", ".odp", ".ott", ".ots", ".otp", ".odg", "odm", _
    ".doc", ".xls", ".ppt", ".dot", ".xlt", ".pot", _
    ".docx", ".docm", ".dotx", ".dotm", ".xlsx", ".xlsm", ".xltx", ".xltm", ".xlsb", ".pptx", ".pptm", ".ppsx", ".ppsm", ".potx", ".potm", ".sldx", ".sldm", _
    ".psw", ".pxl", _
    ".sdw", ".sdc", ".sdd", ".vor", _
    ".rtf", ".xml", ".txt", ".pdb", ".html", _
    ".dif", ".dbf", ".slk", ".csv", _
    ".sda")
  result=0
  For ext = 0 To UBound( extentions )
    anExt = extentions( ext )
    If ( right( sPath, len( anExt ) ) = anExt ) Then
      result=InStr( sPath, anExt )
      Exit For
    EndIf
  Next
  getPositionExtensionInPath=result
End Function ' getPositionExtensionInPath

' UI FUNCTIONS ---------------------------------------------------

' Sets initialization of the UI
Function initUI()
  dChooseFormat.model.CBMSX.Enabled = InStr(GetProductname(),"LibreOffice")
  dChooseFormat.model.CBMSX.State = InStr(GetProductname(),"LibreOffice")
  If ThisComponent.SupportsService( DOC_WRITER ) Then
    dChooseFormat.model.CBODF.Label = GetFilterName("writer8") + " (odt)"
    dChooseFormat.model.CBMSO.Label = GetFilterName("MS Word 97") + " (doc)"
    dChooseFormat.model.CBMSX.Label = GetFilterName("MS Word 2007 XML") + " (docx)"
    dChooseFormat.model.CBPDF.Label = GetFilterName("writer_pdf_Export") + " (pdf)"
  ElseIf ThisComponent.SupportsService( DOC_CALC ) Then
    dChooseFormat.model.CBODF.Label = GetFilterName("calc8") + " (ods)"
    dChooseFormat.model.CBMSO.Label = GetFilterName("MS Excel 97") + " (xls)"
    dChooseFormat.model.CBMSX.Label = GetFilterName("Calc MS Excel 2007 XML") + " (xlsx)"
    dChooseFormat.model.CBPDF.Label = GetFilterName("calc_pdf_Export") + " (pdf)"
  ElseIf ThisComponent.SupportsService( DOC_IMPRESS ) Then
    dChooseFormat.model.CBODF.Label = GetFilterName("impress8") + " (odp)"
    dChooseFormat.model.CBMSO.Label = GetFilterName("MS PowerPoint 97") + " (ppt)"
    dChooseFormat.model.CBMSX.Label = GetFilterName("Impress MS PowerPoint 2007 XML") + " (pptx)"
    dChooseFormat.model.CBPDF.Label = GetFilterName("impress_pdf_Export") + " (pdf)"
  EndIf
End Function ' initUI

' BASIC FUNCTIONS ------------------------------------------------

' Create and return a filedescriptor
' @param uFileDesc The var to save the fileDescriptor in
' @param bCreate   Do we need to create the fileDescriptor
' @param iCounter  De counter van de FileDescriptorList
' @param iFormat   The format to save the file in
' @param sPath     The path to save the file to
' @param sFilter   The name of the Filter to use (optional)
Function createFileDescriptor( uFileDescriptor As FileDescriptor, bCreate As Boolean, iCounter As Integer, iFormat As Integer, sPath As String, Optional sFilter As String )
  If ( bCreate = FALSE ) Then
    Exit Function
  EndIf
  Dim uArgs(2) As New com.sun.star.beans.PropertyValue
  If Not IsMissing( sFilter ) Then
    uArgs( 0 ) = MakePropertyValue( "FilterName", sFilter )
  EndIf
  ' This 2nd property is only needed for pdf. But doesn't hard the others as it is ignored there
  uArgs( 1 ) = MakePropertyValue( "CompressMode", 0 )
  uFileDescriptor.URL = ConvertToURL( sPath )
  uFileDescriptor.format = iFormat
  uFileDescriptor.info = uArgs()
  iCounter = iCounter + 1
End Function ' createFileDescriptor

' Create and return a new com.sun.star.beans.PropertyValue.
' @param cName  The name of the property
' @param uValue The value to give the property (optional)
' @return       The created property
Function makePropertyValue( cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
  Dim oPropertyValue As New com.sun.star.beans.PropertyValue
  oPropertyValue.Name = cName
  If Not IsMissing( uValue ) Then
    oPropertyValue.Value = uValue
  EndIf
  makePropertyValue() = oPropertyValue
End Function ' makePropertyValue

</script:module>
