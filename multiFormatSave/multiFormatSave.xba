<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="multiFormatSave" script:language="StarBasic">REM  *****  BASIC  *****

&apos;************************************************
&apos;Copyright (C) 2004 - 2012 StarXpert -- Florent Manens (LGPL)
&apos;Copyright (C) 2012 Rob Snelders (GPL)

&apos;This program is free software: you can redistribute it and/or modify
&apos;it under the terms of the GNU General Public License as published by
&apos;the Free Software Foundation, either version 3 of the License, or
&apos;(at your option) any later version.

&apos;This program is distributed in the hope that it will be useful,
&apos;but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&apos;GNU General Public License for more details.

&apos;You should have received a copy of the GNU General Public License
&apos;along with this program.  If not, see http://www.gnu.org/licenses/
&apos;************************************************
&apos; Thanks to DannyB for a lot of good examples on ooomacros

&apos; Improvements possible :
&apos;- check if the file has been modified
&apos;- move the localization stuff to another file

Option Explicit

Public DChooseFormat As Object
Public sZipName As String

&apos; Decleration of constants
CONST MAX_DIFFERENT_FORMAT = 3
CONST ODF = 0
CONST OFFICE = 1
CONST PDF = 2
CONST FILTER_NAME = 0
CONST COMPRESS_MODE = 1
CONST NUM_TRANSLATIONS = 7

&apos; Global array for storing localized texts
Dim LocalizedTexts( 0 to NUM_TRANSLATIONS ) as string

&apos; Informations about a file.
Type FileDescriptor
  URL As String
  atype As String   &apos; scalc, swriter, simpress
  format As Integer &apos; ODF, OFFICE, PDF
  info              &apos; description() as &quot;com.sun.star.beans.PropertyValue&quot;
End Type

&apos; goal : record a file under different filter (word, pdf, OOo)
Sub multiFormatSave

  InitializeLanguages

  &apos; Init globals
  &apos; Fix here the save name as the Zip in Makefile
  sZipName = &quot;MultiFormatSave.oxt&quot;

  globalscope.Basiclibraries.Loadlibrary(&quot;multiFormatSave&quot;)
  globalscope.DialogLibraries.LoadLibrary(&quot;multiFormatSave&quot;)
  DChooseFormat = CreateUnoDialog(globalscope.DialogLibraries.multiFormatSave.chooseFormat)

  &apos; fix current file path
  DChooseFormat.model.TFPath.text = ConvertFromURL(getFileDir(thisComponent.Location))
  DChooseFormat.model.TFFilename.text = ConvertFromURL(getFileName(thisComponent.Location))

  &apos; fix icon path
  DChooseFormat.model.IODF.ImageURL = getImagePath(sZipName,&quot;ODF.png&quot;)
  DChooseFormat.model.IMSO.ImageURL = getImagePath(sZipName,&quot;MSO.png&quot;)
  DChooseFormat.model.IPDF.ImageURL = getImagePath(sZipName,&quot;PDF.png&quot;)

  if DChooseFormat.execute()=1 then
    OK
  end if
End Sub

&apos; goal: Function called when the &quot;Save&quot; button is clicked.
Sub OK

  &apos; verify parameters
  if DChooseFormat.model.TFPath.text  = &quot;&quot; then
    MsgBox GetLocalizedText( 0, &quot;You must provide a Path&quot;)
    exit sub
  end if
  if DChooseFormat.model.TFFilename.text = &quot;&quot; then
    MsgBox GetLocalizedText( 1, &quot;You must provide a file name&quot;)
    exit sub
  end if
  if DChooseFormat.model.CBMSO.state=0 and DChooseFormat.model.CBODF.state=0 and DChooseFormat.model.CBPDF.state=0 Then
    Msgbox GetLocalizedText( 2, &quot;You must choose at least one export filter&quot;)
    exit sub
  end if

  &apos; Error managment.
  On Local Error Goto ErrorHandler

  &apos; -- Getting info from the UI. -------------------------------------------
  &apos; Note : sPath is useless for Sending Mail
  Dim sPath As String
  Dim sPathURL As String
  Dim fileName As String
  Dim formats(2) as Boolean

  GetUIProperties( sPath, fileName, formats() )

  &apos; Convert the path to a URL
  sPathURL = ConvertToURL( sPath )
  &apos; check the &quot;/&quot; at url end
  if right(sPathURL,1) &lt;&gt; &quot;/&quot; Then
    sPathURL = sPathURL+&quot;/&quot;
  End If

  &apos; -- module where the macro is called from : Writer, Calc or Impress ? ---
  Dim oTextDoc as Object
  Dim documentType As String

  oTextDoc = ThisComponent
  documentType = GetDocumentType(oTextDoc)

  &apos; -- Generate the info for the files to save. ----------------------------
  Dim FileDescriptorList()
  FileDescriptorList() = generateFileDescriptors( sPathURL, fileName, documentType, formats() )

  &apos; -- Write the files to the disk. ----------------------------------------
  Dim counter
  for counter=0 to UBound( FileDescriptorList() )

    &apos; Save As... Behavior : the file displayed is the OOo version just saved.
    if FileDescriptorList( counter ).format = getCurrentFormat(fileName) then &apos;ODF then
      &apos;print &quot;Save AS&quot;
      oTextDoc.storeAsURL( FileDescriptorList( counter ).URL, FileDescriptorList( counter ).info() )
    Else
      &apos;Export behavior
      oTextDoc.storeToURL( FileDescriptorList( counter ).URL, FileDescriptorList( counter ).info() )
    End if
  next

  DChooseFormat.endExecute
  exit sub

  &apos; Something bad happened when saving file
  ErrorHandler:
    MsgBox GetLocalizedText(3, &quot;Something bad happened when saving file, be sure that target files (MS and PDF) are closed.&quot;)
    MsgBox (GetLocalizedText(4, &quot;Error&quot;) &amp; ERR &amp; GetLocalizedText( 5, &quot; line &quot;) &amp; Erl &amp; &quot;.&quot; &amp; chr$(13) &amp; ERROR$)
End Sub

&apos;getCurrentFormat()------------------------------------------------------------------
&apos;
&apos;@Task : provide format of the current document (ODF, MS)
&apos;@Parameters : file_name =&gt; current document name with its extension
&apos;@Returns : an integer which represents current format : ODF or OFFICE
&apos;------------------------------------------------------------------------------------
Function getCurrentFormat(file_name as string) as integer
  &apos;msgbox file_name
  Dim parts()
  Dim ext as string
  Dim tabOOo(), tabMS() as string
  parts = split(file_name,&quot;.&quot;)

  tabOOo = array(&quot;sxw&quot;, &quot;sxc&quot;, &quot;sxi&quot;, &quot;stw&quot;,&quot;stc&quot;, &quot;sti&quot;, &quot;sxd&quot;, &quot;odt&quot;, &quot;ods&quot;, &quot;odp&quot;, &quot;ott&quot;, &quot;ots&quot;, &quot;otp&quot;, &quot;odg&quot;)
  tabMS = array(&quot;doc&quot;, &quot;xls&quot;, &quot;ppt&quot;, &quot;dot&quot;, &quot;xlt&quot;, &quot;pot&quot;, &quot;docx&quot;, &quot;docm&quot;, &quot;dotx&quot;, &quot;dotm&quot;, &quot;xlsx&quot;, &quot;xlsm&quot;, &quot;xltx&quot;, &quot;xltm&quot;, &quot;xlsb&quot;, &quot;pptx&quot;, &quot;pptm&quot;, &quot;ppsx&quot;, &quot;ppsm&quot;, &quot;potx&quot;, &quot;potm&quot;, &quot;sldx&quot;, &quot;sldm&quot;)

  Dim ubParts as long
  ubParts = ubound(parts)

  &apos;default value : if file_name equals &quot;&quot; or if file_name have no extension
  getCurrentFormat = ODF
  if (ubParts &gt; 0) then
    &apos;here file_name is different than &quot;&quot; and it have an extension
    ext = parts(ubParts)
    if isIn(ext, tabOOo) then
      getCurrentFormat = ODF
    elseif isIn(ext, tabMS) then
      getCurrentFormat = OFFICE
    else
      getCurrentFormat = PDF
    endif
  endif

End function

&apos; Get the values from the interface&apos;s widgets.
&apos;
&apos; Parameters :
&apos; - sPath [OUT] : path were to save the file (useless for SendMail).
&apos; - fileName [OUT] : name from the text-box
&apos; - formats [OUT] : slected format(s) (ODF, MS OFFICE or PDF).
&apos;
Sub GetUIProperties( sPath As String, fileName As String, formats() as Boolean )
  sPath = DChooseFormat.model.TFPath.text
  FileName = DChooseFormat.model.TFFilename.text

  &apos; Format required : ODF, OFFICE or PDF format ?
  Dim counter as Integer
  for counter = 0 to 2
    formats( counter ) = FALSE
  next

  &apos; MS Office (doc, xls, ppt).
  if DChooseFormat.model.CBMSO.state = 1 then
    formats(OFFICE) = TRUE
  end if
  &apos; OpenOffice (odt, ods or odp).
  if DChooseFormat.model.CBODF.state = 1 then
    formats(ODF) = TRUE
  end if
  &apos; PDF
  if DChooseFormat.model.CBPDF.state = 1 then
    formats(PDF) = TRUE
  end if

End Sub

&apos; Saves to  function
&apos;
&apos; Parameters :
&apos; - directoryURL [IN] : URL of the directory where to save the files.
&apos; - documentName [IN] : generic name of the file to be save (name with no extension).
&apos; - documentType [IN] : scalc, swriter or simpress ?
&apos; - formats() [IN] : list of the format (ODF, MS Office, PDF) to save the file to.
&apos;
&apos; Returns :
&apos; - the list of FileDescriptor structure :
&apos;	Struct FileDescriptor {
&apos;		URL : URL to the file
&apos;		info : list of &quot;com.sun.star.beans.PropertyValue&quot; useful for saving a file.
&apos;	}
&apos;
&apos; TODO : we can avoid the &quot;redim&quot; at the end by defining the value of fileDescriptors
&apos; to be returned based on the &quot;format()&quot; argument.
Function generateFileDescriptors( directoryURL As String, documentName As String, documentType As String, formats() As Boolean )

  Dim cDocumentTitle As String
  Dim cURL As String
  Dim originalFilename As String
  Dim position as Integer

  &apos; Get the name of the file to be created.
  Dim listIterator As Integer
  listIterator = 0

  &apos; Note : 3 is the maximum length of the table (odf, ms office, pdf).
  Dim FileDescriptorList( MAX_DIFFERENT_FORMAT ) As FileDescriptor

  &apos; TODO: factorise
  &apos; Note : need 3 args because we return them by reference...
  &apos; ideas : We could write an array sto store things.
  Dim args1(0) as new com.sun.star.beans.PropertyValue
  Dim args2() as new com.sun.star.beans.PropertyValue
  Dim args3(1) as new com.sun.star.beans.PropertyValue

  &apos; Note :
  &apos;FILTER_NAME = 0
  &apos;COMPRESS_MODE = 1

  &apos; Default Initialization (all this is not necessary -&gt;)
  args1(FILTER_NAME).Name = &quot;FilterName&quot;
  args3(FILTER_NAME).Name = &quot;FilterName&quot;
  args3( COMPRESS_MODE ).Name = &quot;CompressMode&quot;
  args3( COMPRESS_MODE ).Value = 0

  &apos; Path to the document (without extension).
  cDocumentTitle = directoryURL + documentName
  originalFilename = cDocumentTitle

  &apos; -- if it exist, delete the extension from the file (&quot;test.odt&quot; -&gt; &quot;test&quot;). ---
  position = getCommonExtention(cDocumentTitle)
  if (position &lt;&gt; 0) then
    &apos;user write extention
    cdocumenttitle = left(cdocumenttitle,(position - 1))
  end if

  &apos;*********************************************
  &apos;Working in Calc
  &apos;*********************************************
  if documentType = &quot;scalc&quot; Then

    &apos; Save as MS Office format (XLS).
    if formats(OFFICE) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.xls&quot; )
      args1( FILTER_NAME ).Value = &quot;MS Excel 97&quot;
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = OFFICE
      FileDescriptorList( listIterator ).info = args1()
      listIterator = listIterator + 1
    end if

    &apos; Save as OpenOffice format (ODS)
    if formats(ODF) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.ods&quot; )
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = ODF
      FileDescriptorList( listIterator ).info = args2()
      listIterator = listIterator + 1
    end if

    &apos; Save as PDF format
    if formats(PDF) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.pdf&quot; )
      args3( FILTER_NAME ).Value = &quot;calc_pdf_Export&quot;
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = PDF
      FileDescriptorList( listIterator ).info = args3()
      listIterator = listIterator + 1
    End if

  &apos;*********************************************
  &apos;Working in Writer
  &apos;*********************************************
  ElseIf documentType = &quot;swriter&quot; Then

    &apos; Save a backup as DOC
    if formats(OFFICE) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.doc&quot; )
      args1( FILTER_NAME ).Value = &quot;MS Word 97&quot;
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = OFFICE
      FileDescriptorList( listIterator ).info = args1()
      listIterator = listIterator + 1
    end if

    &apos; Save the document as ODT
    if formats(ODF) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.odt&quot; )
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = ODF
      FileDescriptorList( listIterator ).info = args2()
      listIterator = listIterator + 1
    end if

    &apos; Save a backup as a PDF
    if formats(PDF) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.pdf&quot; )
      args3( FILTER_NAME ).Value = &quot;writer_pdf_Export&quot;
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = PDF
      FileDescriptorList( listIterator ).info = args3()
      listIterator = listIterator + 1
    End if

  &apos;*********************************************
  &apos;Working in Impress
  &apos;*********************************************
  ElseIf documentType = &quot;simpress&quot; Then

    &apos; Save a backup as PPT
    if formats(OFFICE) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.ppt&quot; )
      args1( FILTER_NAME ).Value = &quot;MS PowerPoint 97&quot;
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = OFFICE
      FileDescriptorList( listIterator ).info = args1()
      listIterator = listIterator + 1
    end if

    &apos; Save the document as SXI or ODP
    if formats(ODF) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.odp&quot; )
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = ODF
      FileDescriptorList( listIterator ).info = args2()
      listIterator = listIterator + 1
    end if

    &apos; Save a backup as a PDF
    if formats(PDF) = TRUE then
      cURL = ConvertToURL( cDocumentTitle + &quot;.pdf&quot; )
      args3( FILTER_NAME ).Value = &quot;impress_pdf_Export&quot;
      FileDescriptorList( listIterator ).URL = cURL
      FileDescriptorList( listIterator ).atype = documentType
      FileDescriptorList( listIterator ).format = PDF
      FileDescriptorList( listIterator ).info = args3()
      listIterator = listIterator + 1
    End If
  End If

  &apos; Resize the table so that it fits exactly the numer of files to be created.
  Redim Preserve FileDescriptorList( listIterator - 1 ) As FileDescriptor

  &apos; Returns the list of fileDescriptor.
  generateFileDescriptors = FileDescriptorList()

End Function

&apos; Goal: Set the file-name
Sub ChoosePath
  Dim Folder As String
  Dim FileName As String

  If DChooseFormat.model.TFPath.text &lt;&gt; &quot;&quot; Then
    Folder = DChooseFormat.model.TFPath.text
  Else
    Folder = getFileDir(thisComponent.Location)
  End If
  If DChooseFormat.model.TFFilename.text &lt;&gt; &quot;&quot; Then
    FileName = DChooseFormat.model.TFFilename.text
  Else
    FileName = getFileName(thisComponent.Location)
  End If
  Folder = OpenFolderDialog(ConvertToURL(Folder))
  if Folder &lt;&gt; &quot;&quot; then
    DChooseFormat.model.TFPath.text = ConvertFromURL(Folder)
  end if
  DChooseFormat.model.TFFilename.text = FileName
End Sub

&apos; Goal: Open the folder-dialog with the given folder
Sub OpenFolderDialog(Folder As String) As String
  Dim sFolderPickerArgs as Variant
  Dim oFolderPicker as Object

  sFolderPickerArgs = Array(com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_SIMPLE )
  oFolderPicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FolderPicker&quot; )
  oFolderPicker.setTitle( GetLocalizedText( 6, &quot;Save in&quot;) )
  oFolderPicker.setDisplayDirectory( Folder )
  If oFolderPicker.execute() Then
    OpenFolderDialog = oFolderPicker.Directory
  End If
End Sub

&apos; Goal: Get the directory where to save to from the filepath
Function getFileDir(FileLocation As String) As String
  &apos; find last  &quot;/&quot;
  &apos; extract first part
  Dim pos as integer
  Dim StringEnd as integer

  pos=1
  While (pos &lt;&gt; 0)
    pos = InStr(pos,FileLocation,&quot;/&quot;) &apos; should i use split ?
    If pos &lt;&gt; 0 Then
      StringEnd=pos
      pos=pos+1
    End If
  Wend
  getFileDir=left(FileLocation,StringEnd)
End Function

&apos; Goal: Get the filename where to save to from the filepath
Function getFileName(FileLocation As String) As String
  &apos; find last  &quot;/&quot;
  &apos; extract last part
  Dim pos as integer
  Dim StringEnd as integer

  pos=1
  while (pos &lt;&gt; 0)
    pos = InStr(pos,FileLocation,&quot;/&quot;) &apos; should i use split ?
    if pos &lt;&gt; 0 then
      StringEnd=pos
      pos=pos+1
    End If
  wend
  getFileName=right(FileLocation,len(FileLocation) -StringEnd)
End Function

&apos; Goal: Invert the selection of CBODF
Sub IODF_click
	DChooseFormat.model.CBODF.state = 1 xor DChooseFormat.model.CBODF.state
End sub

&apos; Goal: Invert the selection of CBPDF
Sub IPDF_click
	DChooseFormat.model.CBPDF.state = 1 xor	DChooseFormat.model.CBPDF.state
End sub

&apos; Goal: Invert the selection of CBMSO
Sub IMSO_click
	DChooseFormat.model.CBMSO.state = 1 xor DChooseFormat.model.CBMSO.state
End sub

&apos; Goal: Get the path to get the images from
function getImagePath(nomModule as String, nomImage as String) as String
&apos; hugly hack to get folder of the package// FIXME
  Dim oPaths as Object
  Dim PathsModule as String
  Dim sValue as String
  Dim sPath as String
  Dim oSettings as Object
  Dim oPathSettings as Object
  Dim sImagePath as string

  sImagePath = ConvertToUrl( GetMyLocation() + nomImage)
  If FileExists(sImagePath) Then
    getImagePath = sImagePath
  Else
    oPathSettings = createUnoService(&quot;com.sun.star.util.PathSettings&quot;)
    sPath = oPathSettings.GetPropertyValue(&quot;Bitmap&quot;)
    sImagePath = ConvertToUrl(sPath) + nomImage
    If FileExists(sImagePath) Then
      &apos;Macro has been delivered during the installation, images are in share/config/symbol
      getImagePath = sImagePath
    Else
      &apos; Macro has been delivered as a package, images are under the package directory
      &apos; Go to Modeles Path
      oPaths = createUnoService(&quot;com.sun.star.util.PathSettings&quot;)
      PathsModule = oPaths.Module + &quot;/../share/uno_packages/cache/uno_packages/&quot;
      sValue = Dir(PathsModule,16)
      Do
	sValue = Dir
      Loop Until instr(sValue,nomModule)&lt;&gt;0 or sValue=&quot;&quot; &apos; verify if package present ? //FIXME

      If sValue = &quot;&quot; Then
        &apos; look into user&apos;s modules
        PathsModule = oPaths.UserConfig + &quot;/../uno_packages/cache/uno_packages/&quot;
        sValue = Dir(PathsModule,16)
        Do
          sValue = Dir
        Loop Until instr(sValue, nomModule) &lt;&gt; 0 or sValue=&quot;&quot;
      End if

      If sValue &lt;&gt; &quot;&quot; Then
        getImagePath =PathsModule+sValue+nomImage
      Else
        getImagePath = &quot;&quot;
      End If
    End If
  End If
End Function

&apos; Goal: Get the current document-type
Function GetDocumentType(oDocument)

  On Local Error GoTo NODOCUMENTTYPE
  If oDocument.SupportsService(&quot;com.sun.star.sheet.SpreadsheetDocument&quot;) Then
    GetDocumentType() = &quot;scalc&quot;
  ElseIf oDocument.SupportsService(&quot;com.sun.star.text.TextDocument&quot;) Then
    GetDocumentType() = &quot;swriter&quot;
  ElseIf oDocument.SupportsService(&quot;com.sun.star.presentation.PresentationDocument&quot;) Then
    GetDocumentType() = &quot;simpress&quot;
  ElseIf oDocument.SupportsService(&quot;com.sun.star.drawing.DrawingDocument&quot;) Then
    GetDocumentType() = &quot;sdraw&quot;
  ElseIf oDocument.SupportsService(&quot;com.sun.star.formula.FormulaProperties&quot;) Then
    GetDocumentType() = &quot;smath&quot;
  ElseIf oDocument.SupportsService(&quot;com.sun.star.database.OfficeDatabaseDocument&quot;) Then
    GetDocumentType() = &quot;sbase&quot;
  End If
  NODOCUMENTTYPE:
    If Err &lt;&gt; 0 Then
      GetDocumentType = &quot;&quot;
    End If
End Function

&apos; Goal: Get the extension for the documenttitle
Function getCommonExtention(DocumentTitle)

  Dim extentions As Variant
  Dim result As Variant
  Dim ext As Integer
  Dim anExt as string

  &apos; list of common extentions
  &apos; Following extensions are recognized:
  &apos; OO.o 1.1.x    - sxw,sxc,sxi,stw,stc,sti,sxd
  &apos; OO.o 2.x      - odt,ods,odp,ott,ots,otp,odg,odm
  &apos; MS Office     - doc,xls,ppt,dot,xlt,pot
  &apos; MS OOXML      - docx,docm,dotx,dotm,xlsx,xlsm,xltx,xltm,xlsb,pptx,pptm,ppsx,ppsm,potx,potm,sldx,sldm
  &apos; MS Pocketpc   - psw,pxl
  &apos; StarX         - sdw,sdc,sdd,vor
  &apos; Writer Other  - rtf,xml,txt,pdb,html
  &apos; Calc Other    - dif,dbf,slk,csv
  &apos; Impress Other - sda

  extentions = Array(&quot;.sxw&quot;, &quot;.sxc&quot;, &quot;.sxi&quot;, &quot;.stw&quot;, &quot;.stc&quot;, &quot;.sti&quot;, &quot;.sxd&quot;, _
    &quot;.odt&quot;, &quot;.ods&quot;, &quot;.odp&quot;, &quot;.ott&quot;, &quot;.ots&quot;, &quot;.otp&quot;, &quot;.odg&quot;, &quot;odm&quot;, _
    &quot;.doc&quot;, &quot;.xls&quot;, &quot;.ppt&quot;, &quot;.dot&quot;, &quot;.xlt&quot;, &quot;.pot&quot;, _
    &quot;.docx&quot;, &quot;.docm&quot;, &quot;.dotx&quot;, &quot;.dotm&quot;, &quot;.xlsx&quot;, &quot;.xlsm&quot;, &quot;.xltx&quot;, &quot;.xltm&quot;, &quot;.xlsb&quot;, &quot;.pptx&quot;, &quot;.pptm&quot;, &quot;.ppsx&quot;, &quot;.ppsm&quot;, &quot;.potx&quot;, &quot;.potm&quot;, &quot;.sldx&quot;, &quot;.sldm&quot;, _
    &quot;.psw&quot;, &quot;.pxl&quot;, _
    &quot;.sdw&quot;, &quot;.sdc&quot;, &quot;.sdd&quot;, &quot;.vor&quot;, _
    &quot;.rtf&quot;, &quot;.xml&quot;, &quot;.txt&quot;, &quot;.pdb&quot;, &quot;.html&quot;, _
    &quot;.dif&quot;, &quot;.dbf&quot;, &quot;.slk&quot;, &quot;.csv&quot;, _
    &quot;.sda&quot;)
  result=0
  for ext = LBound(extentions) To UBound(extentions)
    anExt = extentions(ext)
    if (right(documentTitle, len(anExt)) = anExt) then
      result=InStr(DocumentTitle,anExt)
      Exit For
    end if
  Next ext
  getCommonExtention=result
End Function

&apos; Goal: Connect to the config-values
Function GetConfigAccess( ByVal cNodePath As String, Optional bEnableSync, Optional bLazyWrite ) As Object
  Dim oConfigProvider As Object
  Dim cServiceName As String

  If IsMissing( bEnableSync ) Then
    bEnableSync = True
  EndIf
  If IsMissing( bLazyWrite ) Then
    bLazyWrite = False
  EndIf

  oConfigProvider = createUnoService( &quot;com.sun.star.configuration.ConfigurationProvider&quot; )
  cServiceName = &quot;com.sun.star.configuration.ConfigurationAccess&quot;
  GetConfigAccess() = oConfigProvider.createInstanceWithArguments( cServiceName, _
    Array( MakePropertyValue( &quot;nodepath&quot;, cNodePath ), _
    MakePropertyValue( &quot;lazywrite&quot;, bLazyWrite ) ) )
End Function

&apos; Goal: Get the location to save to
Function GetMyLocation()
  Dim oConfigAccess As Object
  Dim oElement As Object
  Dim oLocation As Object
  Dim cMyLocation As String
  Dim cMyLocations As Variant
  Dim oSM As Object
  Dim oMS As Object

  On error Goto fin
  oConfigAccess = GetConfigAccess( &quot;/multiFormatSave.multiFormatSave.multiFormatSave/multiFormatSaveConfig&quot; )
  oElement = oConfigAccess.getByName( &quot;Settings&quot; )

  if Not oElement.hasByName( &quot;my.location&quot; ) Then
    MsgBox &quot;my.location not defined&quot;
    Exit Function
  EndIf

  oLocation = oElement.getByName( &quot;my.location&quot; )
  cMyLocation = oLocation.Setting
  &apos;cut the vnd.sun.star.expand: part
  cMyLocations = Split(cMyLocation, &quot;vnd.sun.star.expand:&quot;)
  cMyLocation = cMyLocations(1)

  &apos;Expand the macrofield expression
  oSM = getProcessServiceManager

  oMS = oSM.DefaultContext.getValueByName(&quot;/singletons/com.sun.star.util.theMacroExpander&quot;)
  cMyLocation = oMS.ExpandMacros(cMyLocation)
  GetMyLocation() = cMyLocation
  Exit Function

  fin:
    GetMyLocation = &quot;&quot;
End Function

&apos; Returns text in given language.
&apos; If there is no text with the given id default text is returned.
Function GetLocalizedText( uId as Integer, cDefaultText as String)
  &apos; Check that the ids is valid
  GetLocalizedText = &quot;&quot;
  if (uId &gt;=0 and uId &lt; NUM_TRANSLATIONS) then
    GetLocalizedText = LocalizedTexts(uId)
  EndIf

  &apos; If the localized text could not be found use default text
  If (GetLocalizedText = &quot;&quot;) Then
    GetLocalizedText = cDefaultText
  EndIf
End Function

&apos; Initiliazes the localized texts based on the OpenOffice.org language
&apos; New languages can be added to the function
Function InitializeLanguages()

  &apos; French
  If (OOoLang() = &quot;fr&quot;) Then
    LocalizedTexts(0)  = &quot;Vous devez préciser un chemin&quot;
    LocalizedTexts(1)  = &quot;Vous devez préciser un nom de fichier&quot;
    LocalizedTexts(2)  = &quot;Vous devez au moins choisir un format d&apos;export&quot;
    LocalizedTexts(3)  = &quot;Une erreur s&apos;est produite lors de l&apos;enregistrement des fichiers, assurez vous que les fichiers de destination (MS and PDF) sont fermés.&quot;
    LocalizedTexts(4)  = &quot;Erreur&quot;
    LocalizedTexts(5)  = &quot;ligne&quot;
    LocalizedTexts(6)  = &quot;Enregistrer sous&quot;

  &apos; Finnish
  ElseIf (OOoLang() = &quot;fi&quot;) Then
    LocalizedTexts(0)  = &quot;Määrittele tallennuspaikka.&quot;
    LocalizedTexts(1)  = &quot;Määrittele tiedostonimi.&quot;
    LocalizedTexts(2)  = &quot;Valitse vähintään yksi tallennusmuoto.&quot;
    LocalizedTexts(3)  = &quot;Virhe tapahtui tiedoston tallennuksen yhteydessä. Varmista että kohdetiedostot (MS ja PDF) ovat suljettuja.&quot;
    LocalizedTexts(4)  = &quot;Virhe&quot;
    LocalizedTexts(5)  = &quot;rivi&quot;
    LocalizedTexts(6)  = &quot;Valitse tallennuspaikka&quot;

  &apos; German
  ElseIf (OOoLang() = &quot;de&quot;) Then
    LocalizedTexts(0)  = &quot;Sie müssen einen Dateinamen angeben&quot;
    LocalizedTexts(1)  = &quot;Sie müssen einen Verzeichnispfad angeben&quot;
    LocalizedTexts(2)  = &quot;Sie müssen wenigstens ein Dateiformat zum Exportieren wählen&quot;
    LocalizedTexts(3)  = &quot;Ein Fehler ist wärend des Speichervorgangs der Datei aufgetreten, versichern Sie sich das die ausgesuchten Dateien (MS und PDF) geschlossen sind.&quot;
    LocalizedTexts(4)  = &quot;Fehler&quot;
    LocalizedTexts(5)  = &quot;Linie&quot;
    LocalizedTexts(6)  = &quot;Speichern unter...&quot;

  &apos; Spanish
  ElseIf (OOoLang() = &quot;es&quot;) Then
    LocalizedTexts(0)  = &quot;Es necesario introducir un directorio de almacenamiento&quot;
    LocalizedTexts(1)  = &quot;Es necesario introducir el nombre de un archivo&quot;
    LocalizedTexts(2)  = &quot;Es necesario elegir al menos un formato de exportacion&quot;
    LocalizedTexts(3)  = &quot;Se ha producido un error durante el almacenamiento del archivo, asegerate de que los archivos de destino (MS y PDF) estᮠcerrados.&quot;
    LocalizedTexts(4)  = &quot;Error&quot;
    LocalizedTexts(5)  = &quot;linea&quot;
    LocalizedTexts(6)  = &quot;Guardar como&quot;

  &apos; Dutch
  ElseIf (OOoLang() = &quot;nl&quot;) Then
    LocalizedTexts(0)  = &quot;Er is geen pad ingevoerd&quot;
    LocalizedTexts(1)  = &quot;Er is geen bestandsnaam ingevoerd&quot;
    LocalizedTexts(2)  = &quot;U moet minstens 1 export-filter aanvinken&quot;
    LocalizedTexts(3)  = &quot;Er is een fout opgetreden bij het opslaan, zorg dat de doelbestanden (MS en PDF) niet in gebruik zijn.&quot;
    LocalizedTexts(4)  = &quot;Error&quot;
    LocalizedTexts(5)  = &quot;lijn&quot;
    LocalizedTexts(6)  = &quot;Opslaan in&quot;

  &apos; English (Default)
  Else
    LocalizedTexts(0)  = &quot;You must provide a Path&quot;
    LocalizedTexts(1)  = &quot;You must provide a file name&quot;
    LocalizedTexts(2)  = &quot;You must choose at least one export filter&quot;
    LocalizedTexts(3)  = &quot;Something bad happened when saving file, be sure that target files (MS and PDF) are closed.&quot;
    LocalizedTexts(4)  = &quot;Error&quot;
    LocalizedTexts(5)  = &quot;line&quot;
    LocalizedTexts(6)  = &quot;Save in&quot;
  EndIf

End Function

&apos; Returns the language of the OpenOffice.org
&apos; Source of the code: &quot;Usefull macro Information for OpenOffice&quot; by Andrew Pitonyak
Function OOoLang() as string
  Dim oSet
  Dim oConfigProvider
  Dim oParm(0) As New com.sun.star.beans.PropertyValue
  oConfigProvider = createUnoService(&quot;com.sun.star.configuration.ConfigurationProvider&quot;)
  oParm(0) = MakePropertyValue( &quot;nodepath&quot;, &quot;/org.openoffice.Setup/L10N&quot; )
  oSet = oConfigProvider.createInstanceWithArguments(&quot;com.sun.star.configuration.ConfigurationAccess&quot;, oParm())
  OOoLang=lcase(Left(trim(oSet.getbyname(&quot;ooLocale&quot;)),2))
End Function

&apos; BASIC FUNCTIONS ------------------------------------------------

&apos; Check if a string is present in the array of strings
&apos; @param str  String to seek in array
&apos; @param list Array to read through
&apos; @return     Is the string in the list?
Function isIn(str as string, list as array) as boolean
  Dim found as boolean &apos;By default false
  Dim i as integer &apos;By default 0
  Do until found or i &gt; Ubound(list)
    found = (str = list(i))
    i=i+1
  loop
  isIn = found
End function &apos; isIn

&apos; Create and return a new com.sun.star.beans.PropertyValue.
&apos; @param cName  The name of the property
&apos; @param uValue The value to give the property
&apos; @return       The created property
Function makePropertyValue( Optional cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
  Dim oPropertyValue As New com.sun.star.beans.PropertyValue
  If Not IsMissing( cName ) Then
    oPropertyValue.Name = cName
  EndIf
  If Not IsMissing( uValue ) Then
    oPropertyValue.Value = uValue
  EndIf
  makePropertyValue() = oPropertyValue
End Function &apos; makePropertyValue

</script:module>
